```index.tsx
import './index.css'
import React from "react";
import { render } from "react-dom";
import { App } from "./App";

render(<App />, document.getElementById("root"));

```
```App.tsx
import React, { useEffect, useState } from 'react'
import { Layout } from './components/Layout'
import { QuestionScreen } from './components/screens/QuestionScreen'
import { MappingScreen } from './components/screens/MappingScreen'
import { RevelationScreen } from './components/screens/RevelationScreen'
import { JournalScreen } from './components/screens/JournalScreen'
import { LearningScreen } from './components/screens/LearningScreen'
import { useLocalStorage } from './hooks/useLocalStorage'
import { ThemeProvider } from './contexts/ThemeContext'
import { v4 as uuidv4 } from 'uuid'
import { format } from 'date-fns'
import { fr } from 'date-fns/locale'
import { FeedbackSurvey } from './components/ui/FeedbackSurvey'
export function App() {
  const [currentScreen, setCurrentScreen] = useState('question')
  const [question, setQuestion] = useState('')
  const [financialData, setFinancialData] = useState({
    income: [],
    fixedExpenses: [],
    variableExpenses: [],
    debts: [],
    goals: [],
    assets: [],
  })
  const [emotionalContext, setEmotionalContext] = useState({
    mood: 5,
    tags: [],
    notes: '',
  })
  const [journal, setJournal] = useLocalStorage('rivela-journal', [])
  const [currentExplorationId, setCurrentExplorationId] = useState(null)
  const [showFeedback, setShowFeedback] = useState(false)
  const [sessionCount, setSessionCount] = useLocalStorage(
    'rivela-session-count',
    0,
  )
  // Incrémenter le compteur de session et montrer le feedback après plusieurs sessions
  useEffect(() => {
    setSessionCount((prevCount) => prevCount + 1)
    // Montrer le sondage après 3 sessions ou après avoir enregistré quelques explorations
    if (
      sessionCount === 3 ||
      (journal.length > 0 && journal.length % 3 === 0)
    ) {
      setTimeout(() => {
        setShowFeedback(true)
      }, 60000) // Afficher après 1 minute d'utilisation
    }
  }, [])
  const goToScreen = (screen) => {
    setCurrentScreen(screen)
  }
  const handleQuestionSubmit = (q) => {
    setQuestion(q)
    // Créer un nouvel ID d'exploration
    const newExplorationId = uuidv4()
    setCurrentExplorationId(newExplorationId)
    goToScreen('mapping')
  }
  const handleMappingComplete = (data, emotional) => {
    setFinancialData(data)
    setEmotionalContext(emotional)
    goToScreen('revelation')
  }
  const saveExplorationToJournal = (insights) => {
    const newEntry = {
      id: currentExplorationId,
      date: new Date().toISOString(),
      question,
      financialData,
      emotionalContext,
      insights,
      savedAt: format(new Date(), "d MMMM yyyy 'à' HH:mm", {
        locale: fr,
      }),
    }
    setJournal((prev) => [newEntry, ...prev])
  }
  const loadExplorationFromJournal = (explorationId) => {
    const exploration = journal.find((entry) => entry.id === explorationId)
    if (exploration) {
      setQuestion(exploration.question)
      setFinancialData(exploration.financialData)
      setEmotionalContext(exploration.emotionalContext)
      setCurrentExplorationId(explorationId)
      goToScreen('revelation')
    }
  }
  const handleFeedbackSubmit = (feedback) => {
    console.log('Feedback reçu:', feedback)
    // Ici, vous pourriez envoyer le feedback à une API
  }
  return (
    <ThemeProvider>
      <Layout currentScreen={currentScreen}>
        {currentScreen === 'question' && (
          <QuestionScreen
            onSubmit={handleQuestionSubmit}
            recentExplorations={journal.slice(0, 3)}
            onLoadExploration={loadExplorationFromJournal}
          />
        )}
        {currentScreen === 'mapping' && (
          <MappingScreen
            question={question}
            onBack={() => goToScreen('question')}
            onComplete={handleMappingComplete}
          />
        )}
        {currentScreen === 'revelation' && (
          <RevelationScreen
            question={question}
            financialData={financialData}
            emotionalContext={emotionalContext}
            onBack={() => goToScreen('mapping')}
            onNewExploration={() => goToScreen('question')}
            onSaveExploration={saveExplorationToJournal}
            explorationId={currentExplorationId}
            onViewJournal={() => goToScreen('journal')}
            onViewLearning={() => goToScreen('learning')}
          />
        )}
        {currentScreen === 'journal' && (
          <JournalScreen
            journal={journal}
            onLoadExploration={loadExplorationFromJournal}
            onBack={() => goToScreen('question')}
          />
        )}
        {currentScreen === 'learning' && (
          <LearningScreen
            onBack={() => goToScreen('revelation')}
            financialData={financialData}
            emotionalContext={emotionalContext}
          />
        )}
        {/* Bouton de feedback flottant toujours visible */}
        <FeedbackSurvey
          type="fab"
          onClose={() => setShowFeedback(false)}
          onSubmit={handleFeedbackSubmit}
        />
        {/* Modal de feedback qui apparaît automatiquement */}
        {showFeedback && (
          <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <FeedbackSurvey
              onClose={() => setShowFeedback(false)}
              onSubmit={handleFeedbackSubmit}
            />
          </div>
        )}
      </Layout>
    </ThemeProvider>
  )
}

```
```tailwind.config.js
export default {}
```
```index.css
/* PLEASE NOTE: THESE TAILWIND IMPORTS SHOULD NEVER BE DELETED */
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';
/* DO NOT DELETE THESE TAILWIND IMPORTS, OTHERWISE THE STYLING WILL NOT RENDER AT ALL */
```
```components/Layout.tsx
import React, { useState } from 'react'
import { useTheme } from '../contexts/ThemeContext'
import { ThemeSelector } from './ui/ThemeSelector'
import {
  BookOpenIcon,
  BarChartIcon,
  HomeIcon,
  MenuIcon,
  XIcon,
  PieChartIcon,
  HelpCircleIcon,
  UserIcon,
  SettingsIcon,
  BellIcon,
} from 'lucide-react'
export const Layout = ({ children, currentScreen }) => {
  const { theme } = useTheme()
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const [notificationCount] = useState(3)
  const toggleMobileMenu = () => {
    setMobileMenuOpen((prev) => !prev)
  }
  const closeMobileMenu = () => {
    setMobileMenuOpen(false)
  }
  return (
    <div
      className={`min-h-screen w-full bg-gradient-to-br ${theme.gradient} text-${theme.text} transition-colors duration-500`}
    >
      <header className="p-4 flex justify-between items-center backdrop-blur-sm bg-black/10 sticky top-0 z-10">
        <div className="text-2xl font-bold">Rivela</div>
        <div className="hidden md:flex items-center space-x-6">
          <div className="text-sm">Explorateur Financier</div>
          <div className="relative">
            <BellIcon size={20} className="cursor-pointer hover:text-white" />
            {notificationCount > 0 && (
              <div
                className={`absolute -top-1 -right-1 w-4 h-4 rounded-full bg-${theme.accent} text-xs flex items-center justify-center`}
              >
                {notificationCount}
              </div>
            )}
          </div>
          <ThemeSelector />
        </div>
        <div className="md:hidden">
          <button
            onClick={toggleMobileMenu}
            className="p-2 rounded-full bg-white/20 hover:bg-white/30"
            aria-label={mobileMenuOpen ? 'Fermer le menu' : 'Ouvrir le menu'}
          >
            {mobileMenuOpen ? <XIcon size={20} /> : <MenuIcon size={20} />}
          </button>
        </div>
      </header>
      {/* Menu mobile amélioré */}
      {mobileMenuOpen && (
        <div className="md:hidden fixed inset-0 z-50 bg-black/80 backdrop-blur-sm pt-20">
          <div className="container mx-auto px-4">
            <div className="flex justify-end mb-4">
              <button
                onClick={closeMobileMenu}
                className="p-2 rounded-full bg-white/20 hover:bg-white/30"
                aria-label="Fermer le menu"
              >
                <XIcon size={20} />
              </button>
            </div>
            <nav className="flex flex-col space-y-4">
              <a
                href="#"
                className="flex items-center p-3 rounded-lg bg-white/10 hover:bg-white/20"
                onClick={closeMobileMenu}
              >
                <HomeIcon size={20} className="mr-3" />
                <span>Accueil</span>
              </a>
              <a
                href="#"
                className="flex items-center p-3 rounded-lg bg-white/10 hover:bg-white/20"
                onClick={closeMobileMenu}
              >
                <BarChartIcon size={20} className="mr-3" />
                <span>Tableau de bord</span>
              </a>
              <a
                href="#"
                className="flex items-center p-3 rounded-lg bg-white/10 hover:bg-white/20"
                onClick={closeMobileMenu}
              >
                <BookOpenIcon size={20} className="mr-3" />
                <span>Apprentissage</span>
              </a>
              <a
                href="#"
                className="flex items-center p-3 rounded-lg bg-white/10 hover:bg-white/20"
                onClick={closeMobileMenu}
              >
                <PieChartIcon size={20} className="mr-3" />
                <span>Analyses</span>
              </a>
              <a
                href="#"
                className="flex items-center p-3 rounded-lg bg-white/10 hover:bg-white/20"
                onClick={closeMobileMenu}
              >
                <UserIcon size={20} className="mr-3" />
                <span>Profil</span>
              </a>
              <a
                href="#"
                className="flex items-center p-3 rounded-lg bg-white/10 hover:bg-white/20"
                onClick={closeMobileMenu}
              >
                <SettingsIcon size={20} className="mr-3" />
                <span>Paramètres</span>
              </a>
              <a
                href="#"
                className="flex items-center p-3 rounded-lg bg-white/10 hover:bg-white/20"
                onClick={closeMobileMenu}
              >
                <HelpCircleIcon size={20} className="mr-3" />
                <span>Aide</span>
              </a>
              <div className="mt-4 pt-4 border-t border-white/20">
                <ThemeSelector />
              </div>
            </nav>
          </div>
        </div>
      )}
      <main className="container mx-auto px-4 pb-24 min-h-[calc(100vh-160px)]">
        {children}
      </main>
      <footer className="fixed bottom-0 left-0 right-0 bg-black/30 backdrop-blur-sm p-4">
        <div className="container mx-auto flex flex-col md:flex-row justify-between items-center">
          <p className="text-center md:text-left mb-2 md:mb-0">
            "Vos données + Notre science = Votre révélation financière"
          </p>
          <div className="flex items-center space-x-4">
            <p className="text-xs">
              Déjà 127 révélations financières cette semaine
            </p>
            <div className="hidden md:block">
              <ThemeSelector />
            </div>
          </div>
        </div>
      </footer>
    </div>
  )
}

```
```components/screens/QuestionScreen.tsx
import React, { useState } from 'react'
import { motion } from 'framer-motion'
import { SearchIcon, ClockIcon, HistoryIcon } from 'lucide-react'
import { format } from 'date-fns'
import { fr } from 'date-fns/locale'
import { useTheme } from '../../contexts/ThemeContext'
export const QuestionScreen = ({
  onSubmit,
  recentExplorations,
  onLoadExploration,
}) => {
  const [question, setQuestion] = useState('')
  const { theme } = useTheme()
  const [recentQuestions] = useState([
    "Pourquoi j'ai toujours -200€ en fin de mois ?",
    "Puis-je vraiment m'acheter une voiture électrique ?",
    'Comment optimiser mon budget vacances ?',
    'Comment réduire mes dépenses fixes de 15% ?',
    'Quel impact aurait une augmentation de salaire de 10% ?',
    'Combien puis-je économiser en 1 an avec mon budget actuel ?',
  ])
  const handleSubmit = (e) => {
    e.preventDefault()
    if (question.trim()) {
      onSubmit(question)
    }
  }
  const selectQuestion = (q) => {
    setQuestion(q)
  }
  return (
    <motion.div
      initial={{
        opacity: 0,
        y: 20,
      }}
      animate={{
        opacity: 1,
        y: 0,
      }}
      className="max-w-2xl mx-auto mt-10 md:mt-20"
    >
      <motion.div
        initial={{
          scale: 0.9,
          opacity: 0,
        }}
        animate={{
          scale: 1,
          opacity: 1,
        }}
        transition={{
          delay: 0.2,
        }}
        className="text-center mb-10"
      >
        <h1 className="text-3xl md:text-4xl font-bold mb-4">
          Explorez vos finances comme jamais auparavant
        </h1>
        <p className="text-lg opacity-90">
          Posez une question et découvrez des insights uniques sur votre
          situation financière
        </p>
      </motion.div>
      <form onSubmit={handleSubmit} className="mb-10">
        <div className="relative">
          <input
            type="text"
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            placeholder="Ex: Pourquoi j'ai toujours -200€ en fin de mois ?"
            className={`w-full p-5 pr-12 rounded-xl bg-white/20 backdrop-blur-md border border-white/30 focus:outline-none focus:ring-2 focus:ring-${theme.accent}/50 text-white placeholder-white/70 text-lg shadow-xl`}
          />
          <button
            type="submit"
            className={`absolute right-3 top-1/2 -translate-y-1/2 p-3 bg-${theme.primary} hover:bg-opacity-90 rounded-full shadow-lg transition-colors`}
          >
            <SearchIcon size={24} />
          </button>
        </div>
      </form>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <motion.div
          initial={{
            opacity: 0,
            x: -20,
          }}
          animate={{
            opacity: 1,
            x: 0,
          }}
          transition={{
            delay: 0.3,
          }}
          className="bg-white/10 backdrop-blur-md rounded-xl p-6"
        >
          <h2 className="text-lg font-medium mb-3 flex items-center">
            <SearchIcon size={18} className="mr-2" />
            Questions populaires
          </h2>
          <div className="space-y-2">
            {recentQuestions.map((q, index) => (
              <motion.div
                key={index}
                whileHover={{
                  scale: 1.02,
                }}
                className="p-3 rounded-md bg-white/10 cursor-pointer hover:bg-white/20 transition-colors"
                onClick={() => selectQuestion(q)}
              >
                {q}
              </motion.div>
            ))}
          </div>
        </motion.div>
        <motion.div
          initial={{
            opacity: 0,
            x: 20,
          }}
          animate={{
            opacity: 1,
            x: 0,
          }}
          transition={{
            delay: 0.4,
          }}
          className="bg-white/10 backdrop-blur-md rounded-xl p-6"
        >
          <h2 className="text-lg font-medium mb-3 flex items-center">
            <HistoryIcon size={18} className="mr-2" />
            Explorations récentes
          </h2>
          {recentExplorations.length > 0 ? (
            <div className="space-y-2">
              {recentExplorations.map((exploration) => (
                <motion.div
                  key={exploration.id}
                  whileHover={{
                    scale: 1.02,
                  }}
                  className="p-3 rounded-md bg-white/10 cursor-pointer hover:bg-white/20 transition-colors"
                  onClick={() => onLoadExploration(exploration.id)}
                >
                  <div className="font-medium">{exploration.question}</div>
                  <div className="flex items-center text-xs mt-1 opacity-70">
                    <ClockIcon size={12} className="mr-1" />
                    {exploration.savedAt}
                  </div>
                </motion.div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 opacity-60">
              <p>Aucune exploration récente</p>
              <p className="text-sm mt-1">Vos explorations apparaîtront ici</p>
            </div>
          )}
        </motion.div>
      </div>
    </motion.div>
  )
}

```
```components/screens/MappingScreen.tsx
import React, { useEffect, useState } from 'react'
import { motion } from 'framer-motion'
import {
  ArrowLeftIcon,
  CoinsIcon,
  HomeIcon,
  ShoppingCartIcon,
  CreditCardIcon,
  TargetIcon,
  SmileIcon,
  BriefcaseIcon,
  InfoIcon,
} from 'lucide-react'
import { FinancialInput } from '../ui/FinancialInput'
import { EmotionalContext } from '../ui/EmotionalContext'
import { AssetsInput } from '../ui/AssetsInput'
import { useTheme } from '../../contexts/ThemeContext'
export const MappingScreen = ({ question, onBack, onComplete }) => {
  const { theme } = useTheme()
  const [financialData, setFinancialData] = useState({
    income: [],
    fixedExpenses: [],
    variableExpenses: [],
    debts: [],
    goals: [],
    assets: [],
  })
  const [emotionalContext, setEmotionalContext] = useState({
    mood: 5,
    tags: [],
    notes: '',
  })
  const [activeSection, setActiveSection] = useState('income')
  const [progress, setProgress] = useState(0)
  // Calculer la progression
  useEffect(() => {
    const sections = [
      'income',
      'fixedExpenses',
      'variableExpenses',
      'debts',
      'goals',
      'assets',
      'emotional',
    ]
    const completedSections = sections.filter((section) => {
      if (section === 'emotional') {
        return emotionalContext.tags.length > 0
      }
      return financialData[section]?.length > 0
    }).length
    setProgress(Math.round((completedSections / sections.length) * 100))
  }, [financialData, emotionalContext])
  const sections = [
    {
      id: 'income',
      name: 'Revenus',
      icon: <CoinsIcon size={20} />,
    },
    {
      id: 'fixedExpenses',
      name: 'Dépenses Fixes',
      icon: <HomeIcon size={20} />,
    },
    {
      id: 'variableExpenses',
      name: 'Dépenses Variables',
      icon: <ShoppingCartIcon size={20} />,
    },
    {
      id: 'debts',
      name: 'Dettes',
      icon: <CreditCardIcon size={20} />,
    },
    {
      id: 'goals',
      name: 'Objectifs',
      icon: <TargetIcon size={20} />,
    },
    {
      id: 'assets',
      name: 'Actifs',
      icon: <BriefcaseIcon size={20} />,
    },
    {
      id: 'emotional',
      name: 'Contexte Émotionnel',
      icon: <SmileIcon size={20} />,
    },
  ]
  const handleAddItem = (section, item) => {
    setFinancialData((prev) => ({
      ...prev,
      [section]: [...prev[section], item],
    }))
  }
  const handleRemoveItem = (section, index) => {
    setFinancialData((prev) => ({
      ...prev,
      [section]: prev[section].filter((_, i) => i !== index),
    }))
  }
  const handleEmotionalUpdate = (data) => {
    setEmotionalContext(data)
  }
  const handleSubmit = () => {
    onComplete(financialData, emotionalContext)
  }
  const isReadyToSubmit = () => {
    // Vérifier qu'au moins une catégorie contient des données
    return Object.values(financialData).some((category) => category.length > 0)
  }
  return (
    <motion.div
      initial={{
        opacity: 0,
        x: 100,
      }}
      animate={{
        opacity: 1,
        x: 0,
      }}
      exit={{
        opacity: 0,
        x: -100,
      }}
      className="max-w-3xl mx-auto mt-6"
    >
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <button
            onClick={onBack}
            className="mr-4 p-2 rounded-full bg-white/20 hover:bg-white/30"
          >
            <ArrowLeftIcon size={20} />
          </button>
          <h1 className="text-2xl font-bold">Cartographie Financière</h1>
        </div>
        <div className="flex items-center">
          <div className="text-sm mr-2">{progress}%</div>
          <div className="w-32 h-2 bg-white/20 rounded-full">
            <div
              className={`h-full bg-${theme.accent} rounded-full`}
              style={{
                width: `${progress}%`,
              }}
            ></div>
          </div>
        </div>
      </div>
      <div className="bg-white/10 backdrop-blur-md rounded-xl p-4 mb-6">
        <h2 className="font-medium mb-2">Votre question</h2>
        <p className="italic">{question}</p>
      </div>
      <div className="flex overflow-x-auto pb-2 mb-6 gap-2 scrollbar-thin scrollbar-thumb-white/20 scrollbar-track-transparent">
        {sections.map((section) => (
          <button
            key={section.id}
            onClick={() => setActiveSection(section.id)}
            className={`flex items-center p-3 rounded-md whitespace-nowrap transition-colors ${activeSection === section.id ? `bg-${theme.primary} font-medium` : 'bg-white/10 hover:bg-white/20'}`}
          >
            <span className="mr-2">{section.icon}</span>
            {section.name}
            {section.id !== 'emotional' &&
              financialData[section.id]?.length > 0 && (
                <span className="ml-2 bg-white/20 text-xs rounded-full w-5 h-5 flex items-center justify-center">
                  {financialData[section.id].length}
                </span>
              )}
          </button>
        ))}
      </div>
      <div className="bg-white/10 backdrop-blur-md rounded-xl p-6 mb-6">
        {activeSection === 'emotional' ? (
          <EmotionalContext
            value={emotionalContext}
            onChange={handleEmotionalUpdate}
          />
        ) : activeSection === 'assets' ? (
          <AssetsInput
            assets={financialData.assets}
            onAddAsset={(item) => handleAddItem('assets', item)}
            onRemoveAsset={(index) => handleRemoveItem('assets', index)}
          />
        ) : (
          <FinancialInput
            section={activeSection}
            items={financialData[activeSection]}
            onAddItem={(item) => handleAddItem(activeSection, item)}
            onRemoveItem={(index) => handleRemoveItem(activeSection, index)}
          />
        )}
      </div>
      <div className="flex items-center justify-between">
        <div className="flex items-center text-sm">
          <InfoIcon size={16} className="mr-2" />
          <span>
            Plus vous ajoutez d'informations, plus vos insights seront précis
          </span>
        </div>
        <button
          onClick={handleSubmit}
          disabled={!isReadyToSubmit()}
          className={`bg-${theme.primary} hover:bg-opacity-90 text-white font-medium py-3 px-8 rounded-xl shadow-lg transition-colors ${!isReadyToSubmit() ? 'opacity-50 cursor-not-allowed' : ''}`}
        >
          Révéler mes insights
        </button>
      </div>
    </motion.div>
  )
}

```
```components/screens/RevelationScreen.tsx
import React, { useEffect, useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import {
  ArrowLeftIcon,
  Share2Icon,
  DownloadIcon,
  LightbulbIcon,
  BookmarkIcon,
  BookIcon,
  BarChart2Icon,
  CheckIcon,
  FileTextIcon,
  MailIcon,
  ChevronDownIcon,
  ChevronRightIcon,
  SearchIcon,
  BookOpenIcon,
  LinkedinIcon,
  TwitterIcon,
  FacebookIcon,
  CopyIcon,
} from 'lucide-react'
import { Visualization } from '../ui/Visualization'
import { Dashboard } from '../ui/Dashboard'
import { WhatIfSimulator } from '../ui/WhatIfSimulator'
import { HiddenFeesDetector } from '../ui/HiddenFeesDetector'
import { calculateInsights } from '../../utils/financialCalculations'
import { useTheme } from '../../contexts/ThemeContext'
import { exportToPDF, shareByEmail } from '../../utils/exportUtils'
export const RevelationScreen = ({
  question,
  financialData,
  emotionalContext,
  onBack,
  onNewExploration,
  onSaveExploration,
  explorationId,
  onViewJournal,
  onViewLearning,
}) => {
  const { theme } = useTheme()
  const [insights, setInsights] = useState(null)
  const [activeTab, setActiveTab] = useState('insights')
  const [isSaved, setIsSaved] = useState(false)
  const [isShareMenuOpen, setIsShareMenuOpen] = useState(false)
  const [shareSuccess, setShareSuccess] = useState(null)
  const [expandedSections, setExpandedSections] = useState({
    summary: true,
    recommendations: false,
    predictions: false,
  })
  useEffect(() => {
    // Calculer les insights basés sur les données financières et le contexte émotionnel
    const calculatedInsights = calculateInsights(
      financialData,
      emotionalContext,
    )
    // Simuler un temps de calcul pour l'effet
    const timer = setTimeout(() => {
      setInsights(calculatedInsights)
    }, 1500)
    return () => clearTimeout(timer)
  }, [financialData, emotionalContext])
  const handleSaveExploration = () => {
    if (insights) {
      onSaveExploration(insights)
      setIsSaved(true)
      // Réinitialiser l'état après 3 secondes
      setTimeout(() => {
        setIsSaved(false)
      }, 3000)
    }
  }
  const toggleShareMenu = () => {
    setIsShareMenuOpen(!isShareMenuOpen)
  }
  const handleExportPDF = () => {
    exportToPDF({
      question,
      financialData,
      emotionalContext,
      insights,
    })
    setIsShareMenuOpen(false)
  }
  const handleShareByEmail = () => {
    shareByEmail({
      question,
      financialData,
      emotionalContext,
      insights,
    })
    setIsShareMenuOpen(false)
  }
  const handleShareSocial = (platform) => {
    // Simulation de partage sur réseaux sociaux
    console.log(`Partage sur ${platform}`)
    setShareSuccess(platform)
    setTimeout(() => setShareSuccess(null), 3000)
    setIsShareMenuOpen(false)
  }
  const handleCopyLink = () => {
    // Simulation de copie de lien
    navigator.clipboard
      .writeText(`https://rivela.finance/share/${explorationId}`)
      .then(() => {
        setShareSuccess('copy')
        setTimeout(() => setShareSuccess(null), 3000)
      })
    setIsShareMenuOpen(false)
  }
  const toggleSection = (section) => {
    setExpandedSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }))
  }
  if (!insights) {
    return (
      <div className="flex flex-col items-center justify-center h-96">
        <motion.div
          className="w-16 h-16 border-4 border-t-transparent rounded-full mb-4"
          style={{
            borderColor: `rgba(255, 255, 255, 0.3)`,
            borderTopColor: 'transparent',
          }}
          animate={{
            rotate: 360,
          }}
          transition={{
            duration: 1,
            repeat: Infinity,
            ease: 'linear',
          }}
        />
        <p className="text-xl">Analyse en cours...</p>
        <p className="text-sm mt-2">
          Notre moteur scientifique travaille pour vous
        </p>
        <motion.div
          className="mt-8 max-w-md w-full h-2 bg-white/20 rounded-full overflow-hidden"
          initial={{
            width: '0%',
          }}
        >
          <motion.div
            className={`h-full bg-${theme.accent}`}
            initial={{
              width: '5%',
            }}
            animate={{
              width: '100%',
            }}
            transition={{
              duration: 3,
            }}
          />
        </motion.div>
      </div>
    )
  }
  return (
    <motion.div
      initial={{
        opacity: 0,
      }}
      animate={{
        opacity: 1,
      }}
      className="max-w-4xl mx-auto mt-6"
    >
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <button
            onClick={onBack}
            className="mr-4 p-3 rounded-lg bg-white/20 hover:bg-white/30 flex items-center"
            aria-label="Retour"
          >
            <ArrowLeftIcon size={20} className="mr-2" />
            <span className="hidden sm:inline">Retour</span>
          </button>
          <h1 className="text-2xl font-bold">Votre Révélation Financière</h1>
        </div>
        <div className="flex gap-2">
          <button
            onClick={handleSaveExploration}
            className={`p-2 rounded-full ${isSaved ? `bg-green-500` : `bg-white/20 hover:bg-white/30`} transition-colors relative`}
            disabled={isSaved}
            aria-label={isSaved ? 'Sauvegardé' : 'Sauvegarder'}
            title={isSaved ? 'Sauvegardé' : 'Sauvegarder cette exploration'}
          >
            {isSaved ? <CheckIcon size={20} /> : <BookmarkIcon size={20} />}
            {isSaved && (
              <motion.span
                initial={{
                  opacity: 0,
                  y: 10,
                }}
                animate={{
                  opacity: 1,
                  y: 0,
                }}
                exit={{
                  opacity: 0,
                  y: -10,
                }}
                className="absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs bg-black/50 px-2 py-1 rounded whitespace-nowrap"
              >
                Sauvegardé !
              </motion.span>
            )}
          </button>
          <div className="relative">
            <button
              onClick={toggleShareMenu}
              className="p-2 rounded-full bg-white/20 hover:bg-white/30"
              aria-label="Partager"
              title="Partager cette exploration"
            >
              <Share2Icon size={20} />
            </button>
            {isShareMenuOpen && (
              <motion.div
                initial={{
                  opacity: 0,
                  y: 10,
                }}
                animate={{
                  opacity: 1,
                  y: 0,
                }}
                className="absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white/20 backdrop-blur-md z-10"
              >
                <div className="py-1">
                  <button
                    onClick={handleExportPDF}
                    className="flex items-center w-full px-4 py-2 text-sm hover:bg-white/20"
                  >
                    <FileTextIcon size={16} className="mr-2" />
                    Exporter en PDF
                  </button>
                  <button
                    onClick={handleShareByEmail}
                    className="flex items-center w-full px-4 py-2 text-sm hover:bg-white/20"
                  >
                    <MailIcon size={16} className="mr-2" />
                    Partager par email
                  </button>
                  <button
                    onClick={() => handleShareSocial('linkedin')}
                    className="flex items-center w-full px-4 py-2 text-sm hover:bg-white/20"
                  >
                    <LinkedinIcon size={16} className="mr-2" />
                    Partager sur LinkedIn
                  </button>
                  <button
                    onClick={() => handleShareSocial('twitter')}
                    className="flex items-center w-full px-4 py-2 text-sm hover:bg-white/20"
                  >
                    <TwitterIcon size={16} className="mr-2" />
                    Partager sur Twitter
                  </button>
                  <button
                    onClick={handleCopyLink}
                    className="flex items-center w-full px-4 py-2 text-sm hover:bg-white/20"
                  >
                    <CopyIcon size={16} className="mr-2" />
                    Copier le lien
                  </button>
                </div>
              </motion.div>
            )}
          </div>
        </div>
      </div>

      {/* Notification de partage réussi */}
      <AnimatePresence>
        {shareSuccess && (
          <motion.div
            initial={{
              opacity: 0,
              y: -20,
            }}
            animate={{
              opacity: 1,
              y: 0,
            }}
            exit={{
              opacity: 0,
              y: -20,
            }}
            className="fixed top-4 right-4 bg-green-500/90 text-white px-4 py-2 rounded-lg shadow-lg z-50"
          >
            {shareSuccess === 'copy'
              ? 'Lien copié avec succès !'
              : `Partagé sur ${shareSuccess} !`}
          </motion.div>
        )}
      </AnimatePresence>

      <div className="bg-white/10 backdrop-blur-md rounded-xl p-6 mb-6">
        <div className="flex items-center mb-4">
          <LightbulbIcon size={24} className="text-yellow-300 mr-2" />
          <h2 className="text-xl font-bold">Aha Moment!</h2>
        </div>
        <p className="text-lg">{insights.mainInsight}</p>
        <div className="mt-6">
          <div
            className="flex items-center justify-between cursor-pointer"
            onClick={() => toggleSection('summary')}
          >
            <h3 className="font-medium">Résumé de votre situation</h3>
            {expandedSections.summary ? (
              <ChevronDownIcon size={20} />
            ) : (
              <ChevronRightIcon size={20} />
            )}
          </div>
          <AnimatePresence>
            {expandedSections.summary && (
              <motion.div
                initial={{
                  height: 0,
                  opacity: 0,
                }}
                animate={{
                  height: 'auto',
                  opacity: 1,
                }}
                exit={{
                  height: 0,
                  opacity: 0,
                }}
                className="overflow-hidden"
              >
                <div className="pt-3 space-y-2">
                  {insights.summary.map((point, index) => (
                    <div key={index} className="flex items-start">
                      <span className="inline-block w-4 h-4 mt-1 mr-2 bg-white/20 rounded-full"></span>
                      <p>{point}</p>
                    </div>
                  ))}
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
        <div className="mt-4 border-t border-white/20 pt-4">
          <div
            className="flex items-center justify-between cursor-pointer"
            onClick={() => toggleSection('recommendations')}
          >
            <h3 className="font-medium">Recommandations personnalisées</h3>
            {expandedSections.recommendations ? (
              <ChevronDownIcon size={20} />
            ) : (
              <ChevronRightIcon size={20} />
            )}
          </div>
          <AnimatePresence>
            {expandedSections.recommendations && (
              <motion.div
                initial={{
                  height: 0,
                  opacity: 0,
                }}
                animate={{
                  height: 'auto',
                  opacity: 1,
                }}
                exit={{
                  height: 0,
                  opacity: 0,
                }}
                className="overflow-hidden"
              >
                <div className="pt-3 space-y-3">
                  {insights.recommendations.map((rec, index) => (
                    <div key={index} className="flex items-start">
                      <div
                        className={`flex-shrink-0 w-6 h-6 rounded-full bg-${theme.accent}/30 flex items-center justify-center mr-3 mt-0.5`}
                      >
                        {index + 1}
                      </div>
                      <div>
                        <p className="font-medium">{rec.title}</p>
                        <p className="text-sm opacity-80 mt-1">
                          {rec.description}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
        <div className="mt-4 border-t border-white/20 pt-4">
          <div
            className="flex items-center justify-between cursor-pointer"
            onClick={() => toggleSection('predictions')}
          >
            <h3 className="font-medium">Prédictions sur 12 mois</h3>
            {expandedSections.predictions ? (
              <ChevronDownIcon size={20} />
            ) : (
              <ChevronRightIcon size={20} />
            )}
          </div>
          <AnimatePresence>
            {expandedSections.predictions && (
              <motion.div
                initial={{
                  height: 0,
                  opacity: 0,
                }}
                animate={{
                  height: 'auto',
                  opacity: 1,
                }}
                exit={{
                  height: 0,
                  opacity: 0,
                }}
                className="overflow-hidden"
              >
                <div className="pt-3">
                  <p>{insights.prediction}</p>
                  <div className="mt-3 p-3 bg-white/10 rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <span>Aujourd'hui</span>
                      <span>Dans 12 mois</span>
                    </div>
                    <div className="relative h-2 bg-white/20 rounded-full">
                      <div
                        className={`absolute left-0 top-0 h-full bg-${theme.accent} rounded-full`}
                        style={{
                          width: `${insights.predictionData.growthPercentage}%`,
                        }}
                      ></div>
                    </div>
                    <div className="flex items-center justify-between mt-2 text-sm">
                      <span>{insights.predictionData.currentValue}€</span>
                      <span className="font-medium">
                        {insights.predictionData.futureValue}€
                      </span>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
        <div className="mt-6 flex items-center">
          <span className="bg-blue-600 text-xs font-medium px-2.5 py-1 rounded-full flex items-center">
            Science vérifiée
          </span>
          <span className="ml-2 text-sm opacity-80">
            Basé sur l'étude Cambridge 2023
          </span>
        </div>
      </div>

      <div className="bg-white/10 backdrop-blur-md rounded-xl overflow-hidden mb-6">
        <div className="flex flex-wrap border-b border-white/20">
          <button
            onClick={() => setActiveTab('insights')}
            className={`px-6 py-3 text-center flex-1 ${activeTab === 'insights' ? `bg-${theme.primary} font-medium` : ''}`}
          >
            <div className="flex items-center justify-center">
              <BarChart2Icon size={18} className="mr-2" />
              Insights
            </div>
          </button>
          <button
            onClick={() => setActiveTab('whatIf')}
            className={`px-6 py-3 text-center flex-1 ${activeTab === 'whatIf' ? `bg-${theme.primary} font-medium` : ''}`}
          >
            <div className="flex items-center justify-center">
              <LightbulbIcon size={18} className="mr-2" />
              Et si...?
            </div>
          </button>
          <button
            onClick={() => setActiveTab('hiddenFees')}
            className={`px-6 py-3 text-center flex-1 ${activeTab === 'hiddenFees' ? `bg-${theme.primary} font-medium` : ''}`}
          >
            <div className="flex items-center justify-center">
              <SearchIcon size={18} className="mr-2" />
              Frais cachés
            </div>
          </button>
          <button
            onClick={() => setActiveTab('dashboard')}
            className={`px-6 py-3 text-center flex-1 ${activeTab === 'dashboard' ? `bg-${theme.primary} font-medium` : ''}`}
          >
            <div className="flex items-center justify-center">
              <BarChart2Icon size={18} className="mr-2" />
              Tableau de Bord
            </div>
          </button>
        </div>
        <div className="p-6">
          {activeTab === 'insights' && <Visualization insights={insights} />}
          {activeTab === 'whatIf' && (
            <WhatIfSimulator
              financialData={financialData}
              insights={insights}
            />
          )}
          {activeTab === 'hiddenFees' && (
            <HiddenFeesDetector
              financialData={financialData}
              insights={insights}
            />
          )}
          {activeTab === 'dashboard' && (
            <Dashboard financialData={financialData} insights={insights} />
          )}
        </div>
      </div>

      <div className="flex flex-wrap justify-center gap-4">
        <button
          onClick={onViewJournal}
          className={`flex items-center bg-white/20 hover:bg-white/30 font-medium py-3 px-6 rounded-xl transition-colors`}
        >
          <BookIcon size={20} className="mr-2" />
          Journal d'exploration
        </button>
        <button
          onClick={onViewLearning}
          className={`flex items-center bg-white/20 hover:bg-white/30 font-medium py-3 px-6 rounded-xl transition-colors`}
        >
          <BookOpenIcon size={20} className="mr-2" />
          Centre d'apprentissage
        </button>
        <button
          onClick={onNewExploration}
          className={`flex items-center bg-${theme.primary} hover:bg-opacity-90 font-medium py-3 px-6 rounded-xl transition-colors`}
        >
          <LightbulbIcon size={20} className="mr-2" />
          Nouvelle exploration
        </button>
      </div>
    </motion.div>
  )
}

```
```components/ui/FinancialInput.tsx
import React, { useState } from 'react'
import { PlusIcon, XIcon } from 'lucide-react'
import { useTheme } from '../../contexts/ThemeContext'
const sectionIcons = {
  income: '💰',
  fixedExpenses: '🏠',
  variableExpenses: '🛒',
  debts: '💳',
  goals: '🎯',
}
const sectionLabels = {
  income: 'Revenus',
  fixedExpenses: 'Dépenses Fixes',
  variableExpenses: 'Dépenses Variables',
  debts: 'Dettes',
  goals: 'Objectifs',
}
const sectionPlaceholders = {
  income: 'Ex: Salaire, Freelance...',
  fixedExpenses: 'Ex: Loyer, Internet...',
  variableExpenses: 'Ex: Courses, Restaurants...',
  debts: 'Ex: Crédit immobilier, Prêt étudiant...',
  goals: 'Ex: Achat immobilier, Vacances...',
}
export const FinancialInput = ({ section, items, onAddItem, onRemoveItem }) => {
  const { theme } = useTheme()
  const [name, setName] = useState('')
  const [amount, setAmount] = useState('')
  const [frequency, setFrequency] = useState('monthly')
  const [date, setDate] = useState('')
  const handleSubmit = (e) => {
    e.preventDefault()
    if (name && amount) {
      const newItem = {
        name,
        amount: parseFloat(amount),
        frequency,
        date: date || new Date().toISOString().split('T')[0],
      }
      onAddItem(newItem)
      setName('')
      setAmount('')
    }
  }
  const frequencies = [
    {
      value: 'daily',
      label: 'Quotidien',
    },
    {
      value: 'weekly',
      label: 'Hebdomadaire',
    },
    {
      value: 'monthly',
      label: 'Mensuel',
    },
    {
      value: 'yearly',
      label: 'Annuel',
    },
    {
      value: 'once',
      label: 'Ponctuel',
    },
  ]
  return (
    <div>
      <div className="flex items-center mb-4">
        <div className="text-2xl mr-2">{sectionIcons[section]}</div>
        <h2 className="text-xl font-medium">{sectionLabels[section]}</h2>
      </div>
      <form onSubmit={handleSubmit} className="space-y-4 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Nom</label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder={sectionPlaceholders[section]}
              className="w-full p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 placeholder-white/50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Montant (€)
            </label>
            <input
              type="number"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              placeholder="0.00"
              step="0.01"
              min="0"
              className="w-full p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 placeholder-white/50"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">Fréquence</label>
            <select
              value={frequency}
              onChange={(e) => setFrequency(e.target.value)}
              className="w-full p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50"
            >
              {frequencies.map((freq) => (
                <option key={freq.value} value={freq.value}>
                  {freq.label}
                </option>
              ))}
            </select>
          </div>
          {(section === 'goals' || section === 'debts') && (
            <div>
              <label className="block text-sm font-medium mb-1">
                {section === 'goals' ? 'Date cible' : 'Date de fin'}
              </label>
              <input
                type="date"
                value={date}
                onChange={(e) => setDate(e.target.value)}
                className="w-full p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50"
              />
            </div>
          )}
        </div>
        <div className="flex justify-end">
          <button
            type="submit"
            className={`flex items-center p-3 bg-${theme.primary} hover:bg-opacity-90 rounded-md transition-colors`}
          >
            <PlusIcon size={20} className="mr-2" />
            Ajouter
          </button>
        </div>
      </form>
      {items.length > 0 ? (
        <div className="space-y-2">
          {items.map((item, index) => (
            <div
              key={index}
              className="flex items-center justify-between p-4 rounded-md bg-white/10 hover:bg-white/15 transition-colors"
            >
              <div>
                <div className="font-medium">{item.name}</div>
                <div className="text-sm opacity-70">
                  {frequencies.find((f) => f.value === item.frequency)?.label ||
                    'Mensuel'}
                  {item.date && ` • ${item.date}`}
                </div>
              </div>
              <div className="flex items-center">
                <div className="font-medium mr-4">
                  {item.amount.toFixed(2)} €
                </div>
                <button
                  onClick={() => onRemoveItem(index)}
                  className="p-1.5 rounded-full hover:bg-white/20"
                >
                  <XIcon size={18} />
                </button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-8 opacity-60">
          <p>Aucun élément ajouté</p>
          <p className="text-sm mt-1">
            Utilisez le formulaire ci-dessus pour ajouter des éléments
          </p>
        </div>
      )}
    </div>
  )
}

```
```components/ui/EmotionalContext.tsx
import React, { useState } from 'react'
import {
  SmileIcon,
  FrownIcon,
  TagIcon,
  PlusIcon,
  XIcon,
  EditIcon,
} from 'lucide-react'
import { useTheme } from '../../contexts/ThemeContext'
export const EmotionalContext = ({ value, onChange }) => {
  const { theme } = useTheme()
  const [newTag, setNewTag] = useState('')
  const [notes, setNotes] = useState(value.notes || '')
  const handleMoodChange = (e) => {
    onChange({
      ...value,
      mood: parseInt(e.target.value),
    })
  }
  const handleAddTag = (e) => {
    e.preventDefault()
    if (newTag.trim() && !value.tags.includes(newTag.trim())) {
      onChange({
        ...value,
        tags: [...value.tags, newTag.trim()],
      })
      setNewTag('')
    }
  }
  const handleRemoveTag = (tag) => {
    onChange({
      ...value,
      tags: value.tags.filter((t) => t !== tag),
    })
  }
  const handleNotesChange = (e) => {
    setNotes(e.target.value)
    onChange({
      ...value,
      notes: e.target.value,
    })
  }
  const moodEmoji = value.mood >= 7 ? '😄' : value.mood >= 4 ? '😐' : '😔'
  const suggestedTags = [
    'Stress au travail',
    'Événement familial',
    'Fatigue',
    'Fin de mois difficile',
    'Décision importante',
    'Changement professionnel',
    "Projet d'achat",
    'Optimisme financier',
    'Inquiétude économique',
  ].filter((tag) => !value.tags.includes(tag))
  return (
    <div>
      <div className="flex items-center mb-4">
        <SmileIcon size={20} className={`mr-2 text-${theme.accent}`} />
        <h2 className="text-xl font-medium">Contexte Émotionnel</h2>
      </div>
      <div className="mb-8 bg-white/5 p-4 rounded-lg">
        <div className="flex items-center justify-between mb-2">
          <label className="font-medium">Votre humeur aujourd'hui</label>
          <div className="text-2xl">{moodEmoji}</div>
        </div>
        <div className="flex items-center gap-4">
          <FrownIcon size={20} className="text-red-400" />
          <input
            type="range"
            min="1"
            max="10"
            value={value.mood}
            onChange={handleMoodChange}
            className="w-full h-2 rounded-lg appearance-none cursor-pointer bg-white/30"
          />
          <SmileIcon size={20} className="text-green-400" />
        </div>
        <div className="mt-2 text-sm text-center">
          {value.mood <= 3 && "Vous semblez stressé(e) aujourd'hui"}
          {value.mood > 3 &&
            value.mood <= 6 &&
            "Votre humeur est neutre aujourd'hui"}
          {value.mood > 6 && "Vous semblez de bonne humeur aujourd'hui"}
        </div>
      </div>
      <div className="mb-6 bg-white/5 p-4 rounded-lg">
        <div className="flex items-center mb-4">
          <TagIcon size={18} className="mr-2" />
          <h3 className="font-medium">Contexte de vie actuel</h3>
        </div>
        <form onSubmit={handleAddTag} className="flex gap-2 mb-4">
          <input
            type="text"
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            placeholder="Ex: Stress au travail, Déménagement..."
            className="flex-1 p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 placeholder-white/50"
          />
          <button
            type="submit"
            className={`p-3 bg-${theme.primary} hover:bg-opacity-90 rounded-md transition-colors`}
          >
            <PlusIcon size={20} />
          </button>
        </form>
        <div className="flex flex-wrap gap-2 mb-6">
          {value.tags.map((tag, index) => (
            <div
              key={index}
              className="flex items-center bg-white/20 rounded-full px-3 py-1"
            >
              <span>{tag}</span>
              <button
                onClick={() => handleRemoveTag(tag)}
                className="ml-2 hover:text-red-300"
              >
                <XIcon size={14} />
              </button>
            </div>
          ))}
          {value.tags.length === 0 && (
            <div className="text-sm opacity-60">Aucun tag ajouté</div>
          )}
        </div>
        {suggestedTags.length > 0 && (
          <div>
            <div className="text-sm mb-2">Suggestions :</div>
            <div className="flex flex-wrap gap-2">
              {suggestedTags.slice(0, 5).map((tag, index) => (
                <button
                  key={index}
                  onClick={() => {
                    onChange({
                      ...value,
                      tags: [...value.tags, tag],
                    })
                  }}
                  className="bg-white/10 hover:bg-white/20 rounded-full px-3 py-1 text-sm"
                >
                  {tag}
                </button>
              ))}
            </div>
          </div>
        )}
      </div>
      <div className="bg-white/5 p-4 rounded-lg">
        <div className="flex items-center mb-4">
          <EditIcon size={18} className="mr-2" />
          <h3 className="font-medium">Notes personnelles</h3>
        </div>
        <textarea
          value={notes}
          onChange={handleNotesChange}
          placeholder="Ajoutez des notes sur votre situation financière ou émotionnelle actuelle..."
          className="w-full h-32 p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 placeholder-white/50"
        />
        <p className="text-xs opacity-70 mt-2">
          Ces notes vous aideront à contextualiser vos décisions financières
          lorsque vous reviendrez sur cette exploration.
        </p>
      </div>
    </div>
  )
}

```
```components/ui/Visualization.tsx
import React, { Children } from 'react'
import { motion } from 'framer-motion'
import {
  PieChart,
  Pie,
  Cell,
  ResponsiveContainer,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
} from 'recharts'
export const Visualization = ({ insights }) => {
  const { expenseBreakdown, trends, comparisons } = insights
  // Animation variants for the elements
  const containerVariants = {
    hidden: {
      opacity: 0,
    },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.3,
      },
    },
  }
  const itemVariants = {
    hidden: {
      opacity: 0,
      y: 20,
    },
    show: {
      opacity: 1,
      y: 0,
    },
  }
  const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff8042', '#0088fe']
  return (
    <motion.div variants={containerVariants} initial="hidden" animate="show">
      <motion.div variants={itemVariants} className="mb-8">
        <h3 className="text-lg font-medium mb-4">
          Répartition de vos dépenses
        </h3>
        <div className="bg-white/5 rounded-lg p-4">
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={expenseBreakdown}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) =>
                    `${name} ${(percent * 100).toFixed(0)}%`
                  }
                >
                  {expenseBreakdown.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[index % COLORS.length]}
                    />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <div className="mt-4">
            <p className="text-center">
              Vos dépenses variables représentent{' '}
              <span className="font-bold text-yellow-300">42%</span> de votre
              budget total
            </p>
          </div>
        </div>
      </motion.div>
      <motion.div variants={itemVariants} className="mb-8">
        <h3 className="text-lg font-medium mb-4">Tendances sur 6 mois</h3>
        <div className="bg-white/5 rounded-lg p-4">
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                data={trends}
                margin={{
                  top: 5,
                  right: 30,
                  left: 20,
                  bottom: 5,
                }}
              >
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="depenses" fill="#8884d8" />
                <Bar dataKey="revenus" fill="#82ca9d" />
              </BarChart>
            </ResponsiveContainer>
          </div>
          <div className="mt-4">
            <p className="text-center">
              Si vous continuez ainsi, vous dépasserez votre budget de{' '}
              <span className="font-bold text-red-400">15%</span> le mois
              prochain
            </p>
          </div>
        </div>
      </motion.div>
      <motion.div variants={itemVariants}>
        <h3 className="text-lg font-medium mb-4">Comparaisons tangibles</h3>
        <div className="space-y-3">
          {comparisons.map((comparison, index) => (
            <div key={index} className="bg-white/5 p-4 rounded-lg">
              <div className="flex items-center">
                <div className="text-3xl mr-4">{comparison.emoji}</div>
                <div>
                  <div className="font-medium">{comparison.title}</div>
                  <div className="text-sm opacity-80">
                    {comparison.description}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </motion.div>
    </motion.div>
  )
}

```
```components/ui/Dashboard.tsx
import React, { useState } from 'react'
import { motion } from 'framer-motion'
import {
  TrendingUpIcon,
  TrendingDownIcon,
  AlertTriangleIcon,
  BookOpenIcon,
  PieChartIcon,
  BarChart2Icon,
  DollarSignIcon,
  CalendarIcon,
  TargetIcon,
  ArrowRightIcon,
} from 'lucide-react'
import {
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts'
import { useTheme } from '../../contexts/ThemeContext'
export const Dashboard = ({ financialData, insights }) => {
  const { theme } = useTheme()
  const {
    healthIndex = 0,
    learningItems = [],
    alerts = [],
    trends = [],
    spendingCategories = [],
    goalProgress = [],
  } = insights || {}
  const [activeSection, setActiveSection] = useState('overview')
  const sections = [
    {
      id: 'overview',
      name: "Vue d'ensemble",
      icon: <PieChartIcon size={18} />,
    },
    {
      id: 'trends',
      name: 'Tendances',
      icon: <BarChart2Icon size={18} />,
    },
    {
      id: 'goals',
      name: 'Objectifs',
      icon: <TargetIcon size={18} />,
    },
    {
      id: 'learning',
      name: 'Apprentissage',
      icon: <BookOpenIcon size={18} />,
    },
  ]
  const COLORS = [
    '#8884d8',
    '#82ca9d',
    '#ffc658',
    '#ff8042',
    '#0088fe',
    '#00C49F',
  ]
  return (
    <div>
      <div className="flex overflow-x-auto pb-2 mb-6 gap-2 scrollbar-thin scrollbar-thumb-white/20 scrollbar-track-transparent">
        {sections.map((section) => (
          <button
            key={section.id}
            onClick={() => setActiveSection(section.id)}
            className={`flex items-center p-3 rounded-md whitespace-nowrap transition-colors ${activeSection === section.id ? `bg-${theme.primary} font-medium` : 'bg-white/10 hover:bg-white/20'}`}
          >
            <span className="mr-2">{section.icon}</span>
            {section.name}
          </button>
        ))}
      </div>

      {activeSection === 'overview' && (
        <motion.div
          initial={{
            opacity: 0,
          }}
          animate={{
            opacity: 1,
          }}
          className="space-y-6"
        >
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-white/5 rounded-lg p-4">
              <h3 className="text-lg font-medium mb-4">
                Indice de santé financière
              </h3>
              <div className="flex items-center justify-center">
                <div className="relative w-40 h-40">
                  <svg className="w-full h-full" viewBox="0 0 100 100">
                    <circle
                      className="text-white/10"
                      strokeWidth="10"
                      stroke="currentColor"
                      fill="transparent"
                      r="40"
                      cx="50"
                      cy="50"
                    />
                    <circle
                      className={`text-${theme.accent}`}
                      strokeWidth="10"
                      strokeDasharray={`${healthIndex * 2.51} 251`}
                      strokeLinecap="round"
                      stroke="currentColor"
                      fill="transparent"
                      r="40"
                      cx="50"
                      cy="50"
                      transform="rotate(-90 50 50)"
                    />
                  </svg>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="text-3xl font-bold">{healthIndex}</div>
                  </div>
                </div>
              </div>
              <div className="mt-4 flex justify-center">
                {healthIndex > 70 ? (
                  <div className="flex items-center text-green-400">
                    <TrendingUpIcon size={20} className="mr-2" />
                    <span>Bonne santé financière</span>
                  </div>
                ) : healthIndex > 40 ? (
                  <div className="flex items-center text-yellow-400">
                    <AlertTriangleIcon size={20} className="mr-2" />
                    <span>Attention à surveiller</span>
                  </div>
                ) : (
                  <div className="flex items-center text-red-400">
                    <TrendingDownIcon size={20} className="mr-2" />
                    <span>Des ajustements sont nécessaires</span>
                  </div>
                )}
              </div>
            </div>
            <div className="bg-white/5 rounded-lg p-4">
              <h3 className="text-lg font-medium mb-4">
                Répartition des dépenses
              </h3>
              <div className="h-48">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={spendingCategories}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      outerRadius={60}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, percent }) =>
                        `${name} ${(percent * 100).toFixed(0)}%`
                      }
                    >
                      {spendingCategories.map((entry, index) => (
                        <Cell
                          key={`cell-${index}`}
                          fill={COLORS[index % COLORS.length]}
                        />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>
            <div className="bg-white/5 rounded-lg p-4">
              <h3 className="text-lg font-medium mb-4">Bilan mensuel</h3>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <DollarSignIcon size={18} className="mr-2 text-green-400" />
                    <span>Revenus</span>
                  </div>
                  <span className="font-medium">
                    {insights.monthlyIncome.toFixed(2)} €
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <TrendingDownIcon size={18} className="mr-2 text-red-400" />
                    <span>Dépenses</span>
                  </div>
                  <span className="font-medium">
                    {insights.monthlyExpenses.toFixed(2)} €
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <CalendarIcon size={18} className="mr-2 text-blue-400" />
                    <span>Solde</span>
                  </div>
                  <span className="font-medium">
                    {insights.monthlyBalance.toFixed(2)} €
                  </span>
                </div>
                <div className="pt-4 border-t border-white/10">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <TrendingUpIcon
                        size={18}
                        className="mr-2 text-green-400"
                      />
                      <span>Taux d'épargne</span>
                    </div>
                    <span className="font-medium">
                      {insights.savingsRate.toFixed(1)}%
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-white/5 rounded-lg p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium">Points d'attention</h3>
                <span className="bg-red-500/20 text-red-300 text-xs font-medium px-2.5 py-1 rounded-full">
                  {alerts.length} alertes
                </span>
              </div>
              <div className="space-y-3">
                {alerts.map((alert, index) => (
                  <div key={index} className="flex p-3 bg-white/10 rounded-lg">
                    <AlertTriangleIcon
                      size={20}
                      className="mr-3 text-yellow-400 flex-shrink-0 mt-0.5"
                    />
                    <div>
                      <h4 className="font-medium">{alert.title}</h4>
                      <p className="text-sm mt-1 opacity-80">
                        {alert.description}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            <div className="bg-white/5 rounded-lg p-4">
              <h3 className="text-lg font-medium mb-4">Recommandations</h3>
              <div className="space-y-3">
                {insights.recommendations.slice(0, 3).map((rec, index) => (
                  <div key={index} className="p-3 bg-white/10 rounded-lg">
                    <div className="flex items-center">
                      <div
                        className={`flex-shrink-0 w-6 h-6 rounded-full bg-${theme.accent}/30 flex items-center justify-center mr-3`}
                      >
                        {index + 1}
                      </div>
                      <h4 className="font-medium">{rec.title}</h4>
                    </div>
                    <p className="text-sm mt-2 opacity-80 pl-9">
                      {rec.description}
                    </p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </motion.div>
      )}

      {activeSection === 'trends' && (
        <motion.div
          initial={{
            opacity: 0,
          }}
          animate={{
            opacity: 1,
          }}
          className="space-y-6"
        >
          <div className="bg-white/5 rounded-lg p-4">
            <h3 className="text-lg font-medium mb-4">Évolution sur 6 mois</h3>
            <div className="h-72">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart
                  data={trends}
                  margin={{
                    top: 5,
                    right: 30,
                    left: 20,
                    bottom: 5,
                  }}
                >
                  <CartesianGrid
                    strokeDasharray="3 3"
                    stroke="rgba(255,255,255,0.1)"
                  />
                  <XAxis dataKey="name" stroke="rgba(255,255,255,0.7)" />
                  <YAxis stroke="rgba(255,255,255,0.7)" />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'rgba(0,0,0,0.8)',
                      borderColor: 'rgba(255,255,255,0.2)',
                    }}
                  />
                  <Legend />
                  <Line
                    type="monotone"
                    dataKey="revenus"
                    stroke="#82ca9d"
                    activeDot={{
                      r: 8,
                    }}
                  />
                  <Line type="monotone" dataKey="depenses" stroke="#ff8042" />
                  <Line type="monotone" dataKey="solde" stroke="#8884d8" />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-white/5 rounded-lg p-4">
              <h3 className="text-lg font-medium mb-4">
                Répartition des revenus
              </h3>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={insights.incomeBreakdown}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      outerRadius={60}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, percent }) =>
                        `${name} ${(percent * 100).toFixed(0)}%`
                      }
                    >
                      {insights.incomeBreakdown.map((entry, index) => (
                        <Cell
                          key={`cell-${index}`}
                          fill={COLORS[index % COLORS.length]}
                        />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>
            <div className="bg-white/5 rounded-lg p-4">
              <h3 className="text-lg font-medium mb-4">
                Dépenses par catégorie
              </h3>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={insights.expensesByCategory}
                    margin={{
                      top: 5,
                      right: 30,
                      left: 20,
                      bottom: 5,
                    }}
                  >
                    <CartesianGrid
                      strokeDasharray="3 3"
                      stroke="rgba(255,255,255,0.1)"
                    />
                    <XAxis dataKey="name" stroke="rgba(255,255,255,0.7)" />
                    <YAxis stroke="rgba(255,255,255,0.7)" />
                    <Tooltip
                      contentStyle={{
                        backgroundColor: 'rgba(0,0,0,0.8)',
                        borderColor: 'rgba(255,255,255,0.2)',
                      }}
                    />
                    <Bar dataKey="value" fill="#8884d8" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>
          <div className="bg-white/5 rounded-lg p-4">
            <h3 className="text-lg font-medium mb-4">
              Comparaison avec des profils similaires
            </h3>
            <div className="h-72">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={insights.peerComparison}
                  margin={{
                    top: 5,
                    right: 30,
                    left: 20,
                    bottom: 5,
                  }}
                >
                  <CartesianGrid
                    strokeDasharray="3 3"
                    stroke="rgba(255,255,255,0.1)"
                  />
                  <XAxis dataKey="category" stroke="rgba(255,255,255,0.7)" />
                  <YAxis stroke="rgba(255,255,255,0.7)" />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'rgba(0,0,0,0.8)',
                      borderColor: 'rgba(255,255,255,0.2)',
                    }}
                  />
                  <Legend />
                  <Bar dataKey="vous" fill="#8884d8" />
                  <Bar dataKey="moyenne" fill="#82ca9d" />
                </BarChart>
              </ResponsiveContainer>
            </div>
            <div className="mt-4 p-3 bg-white/10 rounded-lg">
              <p className="text-sm">
                <strong>Analyse :</strong> {insights.peerAnalysis}
              </p>
            </div>
          </div>
        </motion.div>
      )}

      {activeSection === 'goals' && (
        <motion.div
          initial={{
            opacity: 0,
          }}
          animate={{
            opacity: 1,
          }}
          className="space-y-6"
        >
          <div className="bg-white/5 rounded-lg p-4">
            <h3 className="text-lg font-medium mb-4">
              Progression de vos objectifs
            </h3>
            {goalProgress.length > 0 ? (
              <div className="space-y-6">
                {goalProgress.map((goal, index) => (
                  <div key={index} className="bg-white/10 p-4 rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium">{goal.name}</h4>
                      <span
                        className={`text-sm ${goal.onTrack ? 'text-green-400' : 'text-yellow-400'}`}
                      >
                        {goal.onTrack ? 'En bonne voie' : 'En retard'}
                      </span>
                    </div>
                    <div className="flex items-center justify-between text-sm mb-2">
                      <span>{goal.current.toFixed(2)} €</span>
                      <span>{goal.target.toFixed(2)} €</span>
                    </div>
                    <div className="relative h-2 bg-white/20 rounded-full">
                      <div
                        className={`absolute left-0 top-0 h-full ${goal.onTrack ? 'bg-green-400' : 'bg-yellow-400'} rounded-full`}
                        style={{
                          width: `${goal.progressPercentage}%`,
                        }}
                      ></div>
                    </div>
                    <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <div className="text-sm opacity-70">Progression</div>
                        <div className="font-medium">
                          {goal.progressPercentage.toFixed(1)}%
                        </div>
                      </div>
                      <div>
                        <div className="text-sm opacity-70">Temps restant</div>
                        <div className="font-medium">{goal.timeRemaining}</div>
                      </div>
                      <div>
                        <div className="text-sm opacity-70">
                          Montant mensuel requis
                        </div>
                        <div className="font-medium">
                          {goal.monthlyRequired.toFixed(2)} €
                        </div>
                      </div>
                    </div>
                    <div className="mt-4 p-3 bg-white/5 rounded-lg">
                      <p className="text-sm">{goal.advice}</p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 opacity-60">
                <p>Aucun objectif financier défini</p>
                <p className="text-sm mt-1">
                  Ajoutez des objectifs dans la section "Cartographie"
                </p>
              </div>
            )}
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-white/5 rounded-lg p-4">
              <h3 className="text-lg font-medium mb-4">Capacité d'épargne</h3>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span>Taux d'épargne actuel</span>
                  <span className="font-medium">
                    {insights.savingsRate.toFixed(1)}%
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span>Taux d'épargne recommandé</span>
                  <span className="font-medium">
                    {insights.recommendedSavingsRate.toFixed(1)}%
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span>Épargne mensuelle moyenne</span>
                  <span className="font-medium">
                    {insights.monthlySavings.toFixed(2)} €
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span>Épargne annuelle projetée</span>
                  <span className="font-medium">
                    {(insights.monthlySavings * 12).toFixed(2)} €
                  </span>
                </div>
              </div>
              <div className="mt-4 p-3 bg-white/10 rounded-lg">
                <p className="text-sm">
                  {insights.savingsRate >= insights.recommendedSavingsRate
                    ? "Votre taux d'épargne est bon ! Continuez ainsi pour atteindre vos objectifs financiers."
                    : `Pour atteindre vos objectifs plus rapidement, essayez d'augmenter votre taux d'épargne de ${(insights.recommendedSavingsRate - insights.savingsRate).toFixed(1)}%.`}
                </p>
              </div>
            </div>
            <div className="bg-white/5 rounded-lg p-4">
              <h3 className="text-lg font-medium mb-4">Objectifs suggérés</h3>
              <div className="space-y-3">
                {insights.suggestedGoals.map((goal, index) => (
                  <div
                    key={index}
                    className="p-3 bg-white/10 rounded-lg flex items-center justify-between"
                  >
                    <div>
                      <h4 className="font-medium">{goal.name}</h4>
                      <p className="text-sm opacity-80 mt-1">
                        {goal.description}
                      </p>
                    </div>
                    <ArrowRightIcon size={20} className="opacity-70" />
                  </div>
                ))}
              </div>
            </div>
          </div>
        </motion.div>
      )}

      {activeSection === 'learning' && (
        <motion.div
          initial={{
            opacity: 0,
          }}
          animate={{
            opacity: 1,
          }}
          className="space-y-6"
        >
          <div className="bg-white/5 rounded-lg p-4">
            <div className="flex items-center mb-4">
              <BookOpenIcon size={20} className={`mr-2 text-${theme.accent}`} />
              <h3 className="text-lg font-medium">Centre d'Apprentissage</h3>
            </div>
            <div className="space-y-4">
              {(learningItems || []).map((item, index) => (
                <motion.div
                  key={index}
                  whileHover={{
                    scale: 1.01,
                  }}
                  className="p-4 bg-white/10 rounded-lg cursor-pointer hover:bg-white/15"
                >
                  <h4 className="font-medium">{item.title}</h4>
                  <p className="text-sm mt-1 opacity-80">{item.description}</p>
                  <div className="mt-3 pt-3 border-t border-white/10">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center">
                        <CalendarIcon size={14} className="mr-1" />
                        <span className="text-xs opacity-70">
                          5 min de lecture
                        </span>
                      </div>
                      <button
                        className={`text-xs bg-${theme.primary} px-2 py-1 rounded-full`}
                      >
                        Lire
                      </button>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
          <div className="bg-white/5 rounded-lg p-4">
            <h3 className="text-lg font-medium mb-4">
              Concepts financiers clés
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {insights.financialConcepts.map((concept, index) => (
                <div key={index} className="p-4 bg-white/10 rounded-lg">
                  <h4 className="font-medium">{concept.title}</h4>
                  <p className="text-sm mt-2 opacity-80">
                    {concept.description}
                  </p>
                  <div className="mt-3 flex items-center">
                    <div
                      className={`px-2 py-0.5 rounded-full text-xs bg-${theme.accent}/30`}
                    >
                      {concept.category}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </motion.div>
      )}
    </div>
  )
}

```
```utils/financialCalculations.ts
// Calculs financiers avancés pour Rivela
import { v4 as uuidv4 } from 'uuid'

// Calculer les insights basés sur les données financières et le contexte émotionnel
export const calculateInsights = (financialData, emotionalContext) => {
  // Calculate monthly totals
  const monthlyIncome = financialData.income.reduce((sum, item) => {
    const amount = parseFloat(item.amount) || 0
    switch (item.frequency) {
      case 'yearly':
        return sum + amount / 12
      case 'monthly':
        return sum + amount
      case 'weekly':
        return sum + (amount * 52) / 12
      case 'daily':
        return sum + (amount * 365) / 12
      default:
        return sum + amount
    }
  }, 0)
  const monthlyExpenses = [
    ...financialData.fixedExpenses,
    ...financialData.variableExpenses,
  ].reduce((sum, item) => {
    const amount = parseFloat(item.amount) || 0
    switch (item.frequency) {
      case 'yearly':
        return sum + amount / 12
      case 'monthly':
        return sum + amount
      case 'weekly':
        return sum + (amount * 52) / 12
      case 'daily':
        return sum + (amount * 365) / 12
      default:
        return sum + amount
    }
  }, 0)
  const monthlyBalance = monthlyIncome - monthlyExpenses
  const savingsRate =
    monthlyIncome > 0 ? (monthlyBalance / monthlyIncome) * 100 : 0
  // Calculate expense breakdown for visualization
  const expenseBreakdown = [
    {
      name: 'Dépenses fixes',
      value: financialData.fixedExpenses.reduce(
        (sum, item) => sum + (parseFloat(item.amount) || 0),
        0,
      ),
    },
    {
      name: 'Dépenses variables',
      value: financialData.variableExpenses.reduce(
        (sum, item) => sum + (parseFloat(item.amount) || 0),
        0,
      ),
    },
  ]
  // Generate mock trends data
  const trends = Array.from({ length: 6 }, (_, i) => ({
    name: new Date(
      Date.now() - i * 30 * 24 * 60 * 60 * 1000,
    ).toLocaleDateString('fr-FR', { month: 'short' }),
    revenus: monthlyIncome * (1 + (Math.random() * 0.1 - 0.05)),
    depenses: monthlyExpenses * (1 + (Math.random() * 0.1 - 0.05)),
    solde: monthlyBalance * (1 + (Math.random() * 0.1 - 0.05)),
  })).reverse()
  // Calculate health index (0-100)
  const healthIndex = Math.min(
    100,
    Math.max(
      0,
      Math.round(
        savingsRate * 0.4 + // Savings rate contribution
          (monthlyBalance > 0 ? 30 : 0) + // Positive balance contribution
          emotionalContext.mood * 6, // Emotional context contribution
      ),
    ),
  )
  return {
    monthlyIncome,
    monthlyExpenses,
    monthlyBalance,
    savingsRate,
    healthIndex,
    expenseBreakdown,
    trends,
    mainInsight: `Votre taux d'épargne est de ${savingsRate.toFixed(1)}% avec un solde mensuel de ${monthlyBalance.toFixed(2)}€`,
    summary: [
      `Vous gagnez ${monthlyIncome.toFixed(2)}€ par mois`,
      `Vos dépenses mensuelles s'élèvent à ${monthlyExpenses.toFixed(2)}€`,
      `Votre solde mensuel est de ${monthlyBalance.toFixed(2)}€`,
    ],
    recommendations: [
      {
        title: 'Optimisez votre budget',
        description:
          monthlyBalance < 0
            ? 'Réduisez vos dépenses variables pour retrouver un solde positif'
            : 'Continuez à maintenir un solde positif',
      },
    ],
    prediction: 'Basé sur vos habitudes actuelles...',
    predictionData: {
      currentValue: monthlyBalance,
      futureValue: monthlyBalance * 12,
      growthPercentage: 75,
    },
    learningItems: generateLearningItems(financialData, emotionalContext),
    comparisons: generateComparisons(financialData),
    // Additional data for Dashboard
    incomeBreakdown: financialData.income.map((item) => ({
      name: item.name,
      value: parseFloat(item.amount) || 0,
    })),
    expensesByCategory: [
      {
        name: 'Logement',
        value: financialData.fixedExpenses.reduce(
          (sum, item) => sum + (parseFloat(item.amount) || 0),
          0,
        ),
      },
      {
        name: 'Variables',
        value: financialData.variableExpenses.reduce(
          (sum, item) => sum + (parseFloat(item.amount) || 0),
          0,
        ),
      },
    ],
    peerComparison: [
      { category: 'Épargne', vous: savingsRate, moyenne: 20 },
      {
        category: 'Dépenses',
        vous: monthlyExpenses,
        moyenne: monthlyExpenses * 1.1,
      },
    ],
    peerAnalysis: `Votre taux d'épargne est ${savingsRate > 20 ? 'supérieur' : 'inférieur'} à la moyenne`,
    recommendedSavingsRate: 20,
    monthlySavings: monthlyBalance > 0 ? monthlyBalance : 0,
    suggestedGoals: [
      {
        name: "Fonds d'urgence",
        description: 'Épargnez 3 à 6 mois de dépenses',
      },
    ],
    alerts:
      monthlyBalance < 0
        ? [
            {
              title: 'Solde négatif',
              description: 'Vos dépenses dépassent vos revenus',
            },
          ]
        : [],
    financialConcepts: [
      {
        title: "Taux d'épargne",
        description: 'Pourcentage de vos revenus mis de côté',
        category: 'Épargne',
      },
    ],
    learningItems: [
      {
        title: 'Gérer son budget',
        description: 'Apprenez à optimiser vos dépenses',
      },
    ],
  }
}

// Simuler un scénario financier
export const simulateScenario = (financialData, adjustments, timeframe) => {
  // Calculer les totaux de base
  const baseIncome = calculateTotal(financialData.income)
  const baseFixedExpenses = calculateTotal(financialData.fixedExpenses)
  const baseVariableExpenses = calculateTotal(financialData.variableExpenses)
  const baseDebts = calculateTotal(financialData.debts)
  const baseAssets = calculateTotal(financialData.assets)

  // Appliquer les ajustements en pourcentage
  const adjustedIncome = baseIncome * (1 + (adjustments.income || 0) / 100)
  const adjustedFixedExpenses =
    baseFixedExpenses * (1 + (adjustments.fixedExpenses || 0) / 100)
  const adjustedVariableExpenses =
    baseVariableExpenses * (1 + (adjustments.variableExpenses || 0) / 100)
  const adjustedDebts = baseDebts * (1 + (adjustments.debts || 0) / 100)
  const adjustedAssets = baseAssets * (1 + (adjustments.assets || 0) / 100)

  // Calculer les métriques ajustées
  const adjustedTotalExpenses = adjustedFixedExpenses + adjustedVariableExpenses
  const adjustedMonthlyBalance = adjustedIncome - adjustedTotalExpenses
  const adjustedSavingsRate =
    adjustedIncome > 0 ? (adjustedMonthlyBalance / adjustedIncome) * 100 : 0

  // Simuler la progression mois par mois
  const monthlyProjection = {}
  let cumulativeSavings = 0
  let cumulativeDebt = adjustedDebts

  for (let month = 0; month <= timeframe; month++) {
    cumulativeSavings += adjustedMonthlyBalance

    // Simuler le remboursement de dette (simplifié)
    if (cumulativeDebt > 0 && adjustedMonthlyBalance > 0) {
      const debtPayment = Math.min(adjustedMonthlyBalance * 0.2, cumulativeDebt)
      cumulativeDebt -= debtPayment
      cumulativeSavings -= debtPayment
    }

    monthlyProjection[month] = {
      income: adjustedIncome,
      expenses: adjustedTotalExpenses,
      savings: cumulativeSavings,
      debt: cumulativeDebt,
      balance: cumulativeSavings - cumulativeDebt,
    }
  }

  // Calculer l'impact sur les objectifs
  const baseTimeToGoal =
    baseIncome > baseFixedExpenses + baseVariableExpenses
      ? (12 * 10000) /
        ((baseIncome - baseFixedExpenses - baseVariableExpenses) * 12)
      : Infinity

  const adjustedTimeToGoal =
    adjustedIncome > adjustedFixedExpenses + adjustedVariableExpenses
      ? (12 * 10000) /
        ((adjustedIncome - adjustedFixedExpenses - adjustedVariableExpenses) *
          12)
      : Infinity

  const goalProgressMonths = Math.round(baseTimeToGoal - adjustedTimeToGoal)

  // Générer une analyse de l'impact
  const analysis = generateScenarioAnalysis({
    baseIncome,
    baseExpenses: baseFixedExpenses + baseVariableExpenses,
    adjustedIncome,
    adjustedExpenses: adjustedFixedExpenses + adjustedVariableExpenses,
    timeframe,
    finalBalance: monthlyProjection[timeframe].balance,
    savingsRate: adjustedSavingsRate,
  })

  return {
    finalBalance: monthlyProjection[timeframe].balance,
    monthlySavings: adjustedMonthlyBalance,
    savingsRate: adjustedSavingsRate,
    balanceChange:
      monthlyProjection[timeframe].balance - (baseAssets - baseDebts),
    monthlyProjection,
    goalProgressMonths,
    analysis,
  }
}

// Détecter les frais cachés dans les données financières
export const detectHiddenFees = (financialData) => {
  const hiddenFees = []

  // Analyser les dépenses fixes pour les abonnements potentiellement oubliés
  if (financialData.fixedExpenses && financialData.fixedExpenses.length > 0) {
    // Simuler la détection d'abonnements non utilisés
    const subscriptions = financialData.fixedExpenses.filter(
      (expense) => expense.amount < 50 && Math.random() > 0.6,
    )

    subscriptions.forEach((subscription) => {
      hiddenFees.push({
        id: uuidv4(),
        name: `Abonnement potentiellement inutilisé: ${subscription.name}`,
        description: `Cet abonnement semble peu utilisé et pourrait être annulé ou renégocié.`,
        monthlyImpact: subscription.amount,
        annualImpact: subscription.amount * 12,
        optimizationDifficulty: 'easy',
        recommendation: `Évaluez si cet abonnement vous apporte une valeur réelle. Si ce n'est pas le cas, envisagez de l'annuler ou de passer à une formule moins coûteuse.`,
      })
    })
  }

  // Analyser les dettes pour des opportunités de refinancement
  if (financialData.debts && financialData.debts.length > 0) {
    // Simuler la détection de taux d'intérêt élevés
    const highInterestDebts = financialData.debts.filter(
      (debt) => debt.amount > 1000 && Math.random() > 0.7,
    )

    highInterestDebts.forEach((debt) => {
      const potentialSaving = debt.amount * 0.02
      hiddenFees.push({
        id: uuidv4(),
        name: `Opportunité de refinancement: ${debt.name}`,
        description: `Ce crédit pourrait être refinancé à un taux plus avantageux.`,
        monthlyImpact: potentialSaving,
        annualImpact: potentialSaving * 12,
        optimizationDifficulty: 'medium',
        recommendation: `Comparez les offres de refinancement disponibles sur le marché. Vous pourriez économiser environ ${(potentialSaving * 12).toFixed(2)}€ par an.`,
      })
    })
  }

  // Analyser les dépenses variables pour des patterns de gaspillage
  if (
    financialData.variableExpenses &&
    financialData.variableExpenses.length > 0
  ) {
    // Simuler la détection de dépenses excessives
    const potentialWaste = financialData.variableExpenses.filter(
      (expense) => Math.random() > 0.8,
    )

    potentialWaste.forEach((expense) => {
      const potentialSaving = expense.amount * 0.3
      hiddenFees.push({
        id: uuidv4(),
        name: `Optimisation possible: ${expense.name}`,
        description: `Cette catégorie de dépense semble plus élevée que la moyenne.`,
        monthlyImpact: potentialSaving,
        annualImpact: potentialSaving * 12,
        optimizationDifficulty: 'medium',
        recommendation: `Analysez en détail vos dépenses dans cette catégorie et identifiez des alternatives moins coûteuses. Une réduction de 30% semble réalisable.`,
      })
    })
  }

  // Si aucun frais caché n'est détecté, générer quelques suggestions génériques
  if (hiddenFees.length === 0) {
    hiddenFees.push({
      id: uuidv4(),
      name: 'Vérification des frais bancaires',
      description:
        'Les frais bancaires peuvent souvent être réduits en changeant de formule ou de banque.',
      monthlyImpact: 5,
      annualImpact: 60,
      optimizationDifficulty: 'easy',
      recommendation:
        'Comparez les offres bancaires et négociez avec votre banque actuelle pour obtenir une réduction des frais.',
    })

    hiddenFees.push({
      id: uuidv4(),
      name: "Optimisation des contrats d'assurance",
      description:
        'Regrouper vos assurances chez un même prestataire peut générer des économies.',
      monthlyImpact: 15,
      annualImpact: 180,
      optimizationDifficulty: 'medium',
      recommendation:
        'Demandez des devis à plusieurs assureurs et envisagez de regrouper vos contrats pour bénéficier de remises.',
    })
  }

  return hiddenFees
}

// Fonctions utilitaires
const calculateTotal = (items = []) => {
  return items.reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0)
}

const calculateHealthIndex = (financialData, emotionalContext) => {
  const totalIncome = calculateTotal(financialData.income)
  const totalFixedExpenses = calculateTotal(financialData.fixedExpenses)
  const totalVariableExpenses = calculateTotal(financialData.variableExpenses)
  const totalDebts = calculateTotal(financialData.debts)

  // Base de l'indice de santé
  let healthIndex = 50

  // Ajuster en fonction du ratio dépenses/revenus
  if (totalIncome > 0) {
    const expenseRatio =
      (totalFixedExpenses + totalVariableExpenses) / totalIncome
    if (expenseRatio < 0.5) healthIndex += 20
    else if (expenseRatio < 0.7) healthIndex += 10
    else if (expenseRatio < 0.9) healthIndex += 0
    else healthIndex -= 20
  }

  // Ajuster en fonction du niveau de dette
  if (totalIncome > 0) {
    const debtRatio = totalDebts / totalIncome
    if (debtRatio < 0.1) healthIndex += 15
    else if (debtRatio < 0.3) healthIndex += 5
    else if (debtRatio > 0.5) healthIndex -= 10
  }

  // Ajuster en fonction de l'humeur
  healthIndex += (emotionalContext.mood - 5) * 2

  // Limiter l'indice entre 0 et 100
  return Math.max(0, Math.min(100, Math.round(healthIndex)))
}

const generateMainInsight = (financialData, emotionalContext) => {
  const insights = [
    "Vos 5 cafés par semaine représentent 60€/mois, soit l'équivalent d'un abonnement annuel à une salle de sport",
    "Réduire vos dépenses variables de 15% vous permettrait d'épargner 2000€ supplémentaires par an",
    "Votre taux d'épargne actuel vous permet d'atteindre votre objectif principal dans 3 ans et 4 mois",
    'Vos abonnements non utilisés représentent 8% de vos dépenses mensuelles',
    'En investissant 10% de vos revenus, vous pourriez générer un capital de 15 000€ en 5 ans',
  ]

  // Sélectionner un insight aléatoire
  return insights[Math.floor(Math.random() * insights.length)]
}

const generateRecommendations = (financialData, emotionalContext, metrics) => {
  const recommendations = [
    {
      title: 'Optimisez vos abonnements',
      description:
        "Faites l'inventaire de tous vos abonnements et résiliez ceux que vous n'utilisez pas régulièrement.",
    },
    {
      title: "Créez un fonds d'urgence",
      description:
        "Épargnez l'équivalent de 3 à 6 mois de dépenses pour faire face aux imprévus.",
    },
    {
      title: 'Automatisez votre épargne',
      description:
        'Mettez en place un virement automatique vers un compte épargne dès réception de votre salaire.',
    },
    {
      title: 'Consolidez vos dettes',
      description:
        "Regroupez vos crédits pour bénéficier d'un taux plus avantageux et simplifier vos remboursements.",
    },
    {
      title: 'Diversifiez vos sources de revenus',
      description:
        'Explorez des opportunités de revenus complémentaires pour renforcer votre sécurité financière.',
    },
  ]

  // Pour une version plus avancée, on pourrait personnaliser les recommandations
  // en fonction des données financières et du contexte émotionnel
  return recommendations
}

const generateComparisons = (financialData) => {
  return [
    {
      emoji: '☕',
      title: 'Vos 5 cafés par semaine',
      description: 'Équivalent à un abonnement annuel à une salle de sport',
    },
    {
      emoji: '🎵',
      title: 'Votre abonnement Spotify',
      description: 'Représente 3 livres par mois que vous pourriez lire',
    },
    {
      emoji: '🛒',
      title: 'Vos achats impulsifs',
      description: 'Cumulés, ils représentent un weekend en Europe',
    },
    {
      emoji: '📱',
      title: 'Votre forfait téléphonique',
      description: 'Équivaut à un repas gastronomique chaque mois',
    },
  ]
}

const generateLearningItems = (financialData, emotionalContext) => {
  return [
    {
      title: 'Comprendre votre cycle de trésorerie',
      description: 'Apprenez à identifier les moments critiques du mois',
    },
    {
      title: 'Optimiser vos paiements de dettes',
      description: 'Stratégies pour réduire les intérêts de 15%',
    },
    {
      title: "L'impact du stress sur vos finances",
      description: "Comment votre humeur influence vos décisions d'achat",
    },
    {
      title: "Les bases de l'investissement",
      description:
        'Comment faire fructifier votre épargne avec un risque maîtrisé',
    },
    {
      title: 'Techniques de budgétisation efficaces',
      description: 'Méthodes simples pour suivre et optimiser vos dépenses',
    },
  ]
}

const generateAlerts = (financialData) => {
  const alerts = [
    {
      title: 'Dépenses de restauration en hausse',
      description: 'Augmentation de 23% par rapport au mois dernier',
    },
    {
      title: "Objectif d'épargne en retard",
      description: 'Vous êtes à 65% de votre objectif trimestriel',
    },
  ]

  // Ajouter des alertes en fonction des données financières
  const totalIncome = calculateTotal(financialData.income)
  const totalExpenses =
    calculateTotal(financialData.fixedExpenses) +
    calculateTotal(financialData.variableExpenses)
  if (totalExpenses > totalIncome * 0.9) {
    alerts.push({
      title: 'Dépenses proches des revenus',
      description: 'Vos dépenses représentent plus de 90% de vos revenus',
    })
  }

  return alerts
}

const generateTrendData = (financialData) => {
  // Simuler des données de tendances sur 6 mois
  const baseIncome = calculateTotal(financialData.income) || 2000
  const baseExpenses =
    calculateTotal(financialData.fixedExpenses) +
      calculateTotal(financialData.variableExpenses) || 1500
  const months = ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin']

  return months.map((month, index) => {
    // Simuler des variations aléatoires
    const incomeVariation = 1 + (Math.random() * 0.1 - 0.05) // -5% à +5%
    const expenseVariation = 1 + (Math.random() * 0.15 - 0.05) // -5% à +10%
    const income = Math.round(baseIncome * incomeVariation)
    const expenses = Math.round(baseExpenses * expenseVariation)

    return {
      name: month,
      revenus: income,
      depenses: expenses,
      solde: income - expenses,
    }
  })
}

const generateSpendingCategories = (financialData) => {
  // Si les données sont disponibles, les utiliser pour créer des catégories
  if (
    financialData.fixedExpenses &&
    financialData.fixedExpenses.length > 0 &&
    financialData.variableExpenses &&
    financialData.variableExpenses.length > 0
  ) {
    const totalFixed = calculateTotal(financialData.fixedExpenses)
    const totalVariable = calculateTotal(financialData.variableExpenses)
    const total = totalFixed + totalVariable

    // Répartir les dépenses fixes en catégories (simplifié)
    return [
      { name: 'Logement', value: Math.round(totalFixed * 0.6) },
      { name: 'Abonnements', value: Math.round(totalFixed * 0.4) },
      { name: 'Alimentation', value: Math.round(totalVariable * 0.4) },
      { name: 'Transport', value: Math.round(totalVariable * 0.2) },
      { name: 'Loisirs', value: Math.round(totalVariable * 0.3) },
      { name: 'Divers', value: Math.round(totalVariable * 0.1) },
    ]
  }

  // Données par défaut si aucune dépense n'est disponible
  return [
    { name: 'Logement', value: 35 },
    { name: 'Alimentation', value: 25 },
    { name: 'Transport', value: 15 },
    { name: 'Loisirs', value: 15 },
    { name: 'Autres', value: 10 },
  ]
}

const generateScenarioAnalysis = (data) => {
  const {
    baseIncome,
    baseExpenses,
    adjustedIncome,
    adjustedExpenses,
    timeframe,
    finalBalance,
    savingsRate,
  } = data

  // Calculer les variations
  const incomeChange = ((adjustedIncome - baseIncome) / baseIncome) * 100
  const expenseChange = ((adjustedExpenses - baseExpenses) / baseExpenses) * 100

  // Générer une analyse personnalisée
  if (finalBalance > 0 && savingsRate > 15) {
    return `Ce scénario est très favorable. En ${timeframe} mois, vous pourriez accumuler ${finalBalance.toFixed(2)}€ avec un taux d'épargne de ${savingsRate.toFixed(1)}%. Cela vous permettrait d'atteindre vos objectifs financiers plus rapidement et de renforcer votre sécurité financière.`
  } else if (finalBalance > 0) {
    return `Ce scénario est positif. Vous parviendriez à épargner ${finalBalance.toFixed(2)}€ en ${timeframe} mois. Pour optimiser davantage, envisagez de réduire certaines dépenses non essentielles ou d'augmenter vos revenus.`
  } else {
    return `Ce scénario présente des défis. Avec un solde négatif de ${finalBalance.toFixed(2)}€ après ${timeframe} mois, vous devriez reconsidérer certains choix financiers. Concentrez-vous sur la réduction des dépenses non essentielles et l'augmentation de vos revenus.`
  }
}

const generateIncomeBreakdown = (financialData) => {
  if (financialData.income && financialData.income.length > 0) {
    // Créer des catégories basées sur les données réelles
    return financialData.income.map((income) => ({
      name: income.name,
      value: income.amount,
    }))
  }

  // Données par défaut
  return [
    { name: 'Salaire principal', value: 70 },
    { name: 'Revenus complémentaires', value: 20 },
    { name: 'Autres', value: 10 },
  ]
}

const generateExpensesByCategory = (financialData) => {
  // Regrouper les dépenses fixes et variables par catégorie
  const categories = {}

  if (financialData.fixedExpenses) {
    financialData.fixedExpenses.forEach((expense) => {
      const category = getCategoryForExpense(expense.name)
      categories[category] = (categories[category] || 0) + expense.amount
    })
  }

  if (financialData.variableExpenses) {
    financialData.variableExpenses.forEach((expense) => {
      const category = getCategoryForExpense(expense.name)
      categories[category] = (categories[category] || 0) + expense.amount
    })
  }

  // Convertir en tableau pour le graphique
  return Object.entries(categories).map(([name, value]) => ({ name, value }))
}

const getCategoryForExpense = (expenseName) => {
  // Logique simplifiée pour catégoriser les dépenses
  expenseName = expenseName.toLowerCase()
  if (
    expenseName.includes('loyer') ||
    expenseName.includes('appartement') ||
    expenseName.includes('maison')
  ) {
    return 'Logement'
  } else if (
    expenseName.includes('netflix') ||
    expenseName.includes('spotify') ||
    expenseName.includes('abonnement')
  ) {
    return 'Abonnements'
  } else if (
    expenseName.includes('courses') ||
    expenseName.includes('alimentation') ||
    expenseName.includes('restaurant')
  ) {
    return 'Alimentation'
  } else if (
    expenseName.includes('essence') ||
    expenseName.includes('transport') ||
    expenseName.includes('voiture')
  ) {
    return 'Transport'
  } else if (
    expenseName.includes('loisir') ||
    expenseName.includes('cinéma') ||
    expenseName.includes('sport')
  ) {
    return 'Loisirs'
  }
  return 'Autres'
}

const generatePeerComparison = (financialData) => {
  // Simuler une comparaison avec des profils similaires
  const categories = [
    'Logement',
    'Alimentation',
    'Transport',
    'Loisirs',
    'Épargne',
  ]
  return categories.map((category) => {
    // Simuler des valeurs pour l'utilisateur et la moyenne
    const userValue = Math.round(100 + Math.random() * 400)
    const averageValue = Math.round(100 + Math.random() * 400)
    return {
      category,
      vous: userValue,
      moyenne: averageValue,
    }
  })
}

const generatePeerAnalysis = (financialData) => {
  // Simuler une analyse par rapport aux pairs
  const analyses = [
    'Vous dépensez 15% de moins que la moyenne en logement, mais 20% de plus en loisirs.',
    "Votre taux d'épargne est supérieur à 70% des personnes ayant un profil similaire.",
    'Vos dépenses alimentaires sont dans la moyenne, mais vous pourriez optimiser vos abonnements.',
    'Vous consacrez plus de budget aux transports que 85% des profils similaires.',
  ]
  return analyses[Math.floor(Math.random() * analyses.length)]
}

const generateGoalProgress = (financialData) => {
  if (!financialData.goals || financialData.goals.length === 0) {
    return []
  }

  // Simuler la progression pour chaque objectif
  return financialData.goals.map((goal) => {
    const target = goal.amount
    const current = target * (Math.random() * 0.8) // 0% à 80% de progression
    const progressPercentage = (current / target) * 100
    const onTrack = Math.random() > 0.3 // 70% de chance d'être en bonne voie

    return {
      name: goal.name,
      target,
      current,
      progressPercentage,
      onTrack,
      timeRemaining: `${Math.round(Math.random() * 24 + 3)} mois`,
      monthlyRequired: (target - current) / 12,
      advice: onTrack
        ? 'Vous êtes en bonne voie. Continuez ainsi pour atteindre votre objectif dans les délais prévus.'
        : 'Pour atteindre votre objectif dans les délais, augmentez votre contribution mensuelle ou réévaluez votre échéance.',
    }
  })
}

const generatePrediction = (financialData, savingsRate) => {
  // Générer une prédiction personnalisée
  if (savingsRate <= 0) {
    return "Si vous continuez ainsi, votre situation financière risque de se dégrader. Il est recommandé de réduire vos dépenses non essentielles et d'augmenter vos revenus si possible."
  } else if (savingsRate < 10) {
    return "Avec votre taux d'épargne actuel, vous pourrez constituer un fonds d'urgence en 2 ans, mais l'atteinte de vos objectifs à long terme prendra plus de temps."
  } else {
    return "Votre taux d'épargne est bon. En maintenant cette discipline, vous pourrez non seulement constituer un fonds d'urgence solide mais aussi commencer à investir pour votre avenir."
  }
}

const generateSummary = (financialData, metrics) => {
  const { totalIncome, totalExpenses, savingsRate, healthIndex } = metrics
  const summary = [
    `Votre revenu mensuel est de ${totalIncome.toFixed(2)}€, dont vous dépensez ${totalExpenses.toFixed(2)}€ (${Math.round((totalExpenses / totalIncome) * 100)}% de vos revenus).`,
    `Votre taux d'épargne actuel est de ${savingsRate.toFixed(1)}%, ${savingsRate < 10 ? 'ce qui est inférieur aux 10-15% recommandés' : 'ce qui est bon et vous permet de construire votre sécurité financière'}.`,
  ]

  if (healthIndex < 40) {
    summary.push(
      'Votre situation financière présente des risques importants et nécessite des ajustements rapides.',
    )
  } else if (healthIndex < 70) {
    summary.push(
      'Votre situation financière est stable mais pourrait être améliorée avec quelques ajustements ciblés.',
    )
  } else {
    summary.push(
      "Votre situation financière est saine. Continuez à maintenir de bonnes habitudes et envisagez d'optimiser davantage vos investissements.",
    )
  }

  // Ajouter un point sur les dettes si présentes
  const totalDebts = calculateTotal(financialData.debts)
  if (totalDebts > 0) {
    summary.push(
      `Vos dettes actuelles s'élèvent à ${totalDebts.toFixed(2)}€, soit ${Math.round((totalDebts / totalIncome) * 100)}% de vos revenus mensuels.`,
    )
  }

  // Ajouter un point sur les actifs si présents
  const totalAssets = calculateTotal(financialData.assets)
  if (totalAssets > 0) {
    summary.push(
      `Vos actifs s'élèvent à ${totalAssets.toFixed(2)}€, ce qui constitue une base solide pour votre sécurité financière.`,
    )
  }

  return summary
}

```
```contexts/ThemeContext.tsx
import React, { useEffect, useState, createContext, useContext } from 'react'
// Définition des thèmes disponibles
const themes = {
  default: {
    name: 'Défaut',
    gradient: 'from-indigo-500 via-purple-500 to-blue-500',
    primary: 'indigo-600',
    secondary: 'purple-500',
    accent: 'blue-400',
    text: 'white',
  },
  sunset: {
    name: 'Coucher de soleil',
    gradient: 'from-orange-500 via-red-500 to-pink-500',
    primary: 'red-600',
    secondary: 'orange-500',
    accent: 'yellow-400',
    text: 'white',
  },
  ocean: {
    name: 'Océan',
    gradient: 'from-cyan-500 via-blue-500 to-indigo-500',
    primary: 'blue-600',
    secondary: 'cyan-500',
    accent: 'teal-400',
    text: 'white',
  },
  forest: {
    name: 'Forêt',
    gradient: 'from-emerald-500 via-green-500 to-teal-500',
    primary: 'green-600',
    secondary: 'emerald-500',
    accent: 'lime-400',
    text: 'white',
  },
  night: {
    name: 'Nuit',
    gradient: 'from-slate-800 via-gray-900 to-slate-700',
    primary: 'slate-600',
    secondary: 'indigo-500',
    accent: 'violet-400',
    text: 'white',
  },
}
// Création du contexte
const ThemeContext = createContext()
export const ThemeProvider = ({ children }) => {
  const [currentTheme, setCurrentTheme] = useState('default')
  // Récupérer le thème depuis le localStorage au chargement
  useEffect(() => {
    const savedTheme = localStorage.getItem('rivela-theme')
    if (savedTheme && themes[savedTheme]) {
      setCurrentTheme(savedTheme)
    }
  }, [])
  // Sauvegarder le thème dans le localStorage à chaque changement
  useEffect(() => {
    localStorage.setItem('rivela-theme', currentTheme)
  }, [currentTheme])
  const theme = themes[currentTheme] || themes.default
  const changeTheme = (newTheme) => {
    if (themes[newTheme]) {
      setCurrentTheme(newTheme)
    }
  }
  return (
    <ThemeContext.Provider
      value={{
        theme,
        currentTheme,
        changeTheme,
        availableThemes: themes,
      }}
    >
      {children}
    </ThemeContext.Provider>
  )
}
export const useTheme = () => useContext(ThemeContext)

```
```hooks/useLocalStorage.tsx
import React, { useEffect, useState } from 'react'
export function useLocalStorage(key, initialValue) {
  // Récupérer la valeur depuis le localStorage ou utiliser la valeur initiale
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key)
      return item ? JSON.parse(item) : initialValue
    } catch (error) {
      console.error(
        `Erreur lors de la récupération de ${key} depuis localStorage:`,
        error,
      )
      return initialValue
    }
  })
  // Mettre à jour le localStorage quand la valeur change
  useEffect(() => {
    try {
      window.localStorage.setItem(key, JSON.stringify(storedValue))
    } catch (error) {
      console.error(
        `Erreur lors de l'enregistrement de ${key} dans localStorage:`,
        error,
      )
    }
  }, [key, storedValue])
  return [storedValue, setStoredValue]
}

```
```components/ui/ThemeSelector.tsx
import React, { useState } from 'react'
import { useTheme } from '../../contexts/ThemeContext'
import { PaletteIcon, CheckIcon } from 'lucide-react'
export const ThemeSelector = () => {
  const { changeTheme, currentTheme, availableThemes } = useTheme()
  const [isOpen, setIsOpen] = useState(false)
  const toggleDropdown = () => setIsOpen(!isOpen)
  const handleThemeChange = (themeKey) => {
    changeTheme(themeKey)
    setIsOpen(false)
  }
  return (
    <div className="relative">
      <button
        onClick={toggleDropdown}
        className="flex items-center space-x-1 p-2 rounded-md bg-white/10 hover:bg-white/20"
      >
        <PaletteIcon size={16} />
        <span className="text-sm">Thème</span>
      </button>
      {isOpen && (
        <div className="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white/20 backdrop-blur-md ring-1 ring-black/5 z-20">
          <div className="py-1">
            {Object.entries(availableThemes).map(([key, theme]) => (
              <button
                key={key}
                onClick={() => handleThemeChange(key)}
                className={`flex items-center justify-between w-full px-4 py-2 text-sm hover:bg-white/20 ${currentTheme === key ? 'font-medium' : ''}`}
              >
                <span>{theme.name}</span>
                {currentTheme === key && <CheckIcon size={16} />}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}

```
```components/ui/AssetsInput.tsx
import React, { useState } from 'react'
import {
  PlusIcon,
  XIcon,
  BriefcaseIcon,
  HomeIcon,
  TrendingUpIcon,
} from 'lucide-react'
import { useTheme } from '../../contexts/ThemeContext'
const assetTypes = [
  {
    id: 'real_estate',
    name: 'Immobilier',
    icon: <HomeIcon size={16} />,
  },
  {
    id: 'investments',
    name: 'Investissements',
    icon: <TrendingUpIcon size={16} />,
  },
  {
    id: 'savings',
    name: 'Épargne',
    icon: <BriefcaseIcon size={16} />,
  },
  {
    id: 'other',
    name: 'Autre',
    icon: <BriefcaseIcon size={16} />,
  },
]
export const AssetsInput = ({ assets, onAddAsset, onRemoveAsset }) => {
  const { theme } = useTheme()
  const [name, setName] = useState('')
  const [amount, setAmount] = useState('')
  const [assetType, setAssetType] = useState('real_estate')
  const [appreciation, setAppreciation] = useState('')
  const handleSubmit = (e) => {
    e.preventDefault()
    if (name && amount) {
      onAddAsset({
        name,
        amount: parseFloat(amount),
        type: assetType,
        appreciation: appreciation ? parseFloat(appreciation) : 0,
        date: new Date().toISOString(),
      })
      setName('')
      setAmount('')
      setAppreciation('')
    }
  }
  const getAssetTypeLabel = (typeId) => {
    return assetTypes.find((type) => type.id === typeId)?.name || 'Autre'
  }
  return (
    <div>
      <div className="flex items-center mb-4">
        <BriefcaseIcon size={20} className={`mr-2 text-${theme.accent}`} />
        <h2 className="text-xl font-medium">Actifs</h2>
      </div>
      <form onSubmit={handleSubmit} className="space-y-4 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">
              Nom de l'actif
            </label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="Ex: Appartement, Actions..."
              className="w-full p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 placeholder-white/50"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Valeur actuelle (€)
            </label>
            <input
              type="number"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              placeholder="Montant €"
              className="w-full p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 placeholder-white/50"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">
              Type d'actif
            </label>
            <select
              value={assetType}
              onChange={(e) => setAssetType(e.target.value)}
              className="w-full p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50"
            >
              {assetTypes.map((type) => (
                <option key={type.id} value={type.id}>
                  {type.name}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Appréciation annuelle estimée (%)
            </label>
            <input
              type="number"
              value={appreciation}
              onChange={(e) => setAppreciation(e.target.value)}
              placeholder="Ex: 2.5"
              className="w-full p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 placeholder-white/50"
            />
          </div>
        </div>
        <div className="flex justify-end">
          <button
            type="submit"
            className={`flex items-center p-3 bg-${theme.primary} hover:bg-opacity-90 rounded-md transition-colors`}
          >
            <PlusIcon size={20} className="mr-2" />
            Ajouter cet actif
          </button>
        </div>
      </form>
      {assets.length > 0 ? (
        <div className="space-y-2">
          {assets.map((asset, index) => (
            <div
              key={index}
              className="flex items-center justify-between p-4 rounded-md bg-white/10 hover:bg-white/15 transition-colors"
            >
              <div className="flex-1">
                <div className="flex items-center">
                  {assetTypes.find((type) => type.id === asset.type)?.icon}
                  <span className="ml-2 font-medium">{asset.name}</span>
                  <span className="ml-2 text-xs bg-white/20 px-2 py-0.5 rounded-full">
                    {getAssetTypeLabel(asset.type)}
                  </span>
                </div>
                <div className="text-sm opacity-80 mt-1">
                  Ajouté le {new Date(asset.date).toLocaleDateString()}
                  {asset.appreciation > 0 &&
                    ` • Appréciation: ${asset.appreciation}% par an`}
                </div>
              </div>
              <div className={`font-medium text-${theme.accent} mr-4`}>
                {asset.amount.toFixed(2)} €
              </div>
              <button
                onClick={() => onRemoveAsset(index)}
                className="p-1.5 rounded-full hover:bg-white/20"
              >
                <XIcon size={18} />
              </button>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-8 opacity-60">
          <p>Aucun actif ajouté</p>
          <p className="text-sm mt-1">
            Ajoutez vos biens immobiliers, investissements et épargne
          </p>
        </div>
      )}
    </div>
  )
}

```
```components/ui/WhatIfSimulator.tsx
import React, { useEffect, useState } from 'react'
import { motion } from 'framer-motion'
import {
  PlusIcon,
  MinusIcon,
  RefreshCcwIcon,
  TrendingUpIcon,
  TrendingDownIcon,
  SaveIcon,
  BarChart2Icon,
} from 'lucide-react'
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts'
import { simulateScenario } from '../../utils/financialCalculations'
import { useTheme } from '../../contexts/ThemeContext'
// Scénarios prédéfinis
const predefinedScenarios = [
  {
    id: 'reduce_expenses',
    name: 'Réduire les dépenses de 10%',
    adjustments: {
      fixedExpenses: -10,
      variableExpenses: -10,
    },
  },
  {
    id: 'income_increase',
    name: 'Augmentation de salaire de 5%',
    adjustments: {
      income: 5,
    },
  },
  {
    id: 'debt_payment',
    name: 'Rembourser une dette',
    adjustments: {
      debts: -20,
      variableExpenses: -5,
    },
  },
  {
    id: 'investment',
    name: 'Investir 10% des revenus',
    adjustments: {
      assets: 10,
      income: -10,
    },
  },
]
export const WhatIfSimulator = ({ financialData, insights }) => {
  const { theme } = useTheme()
  const [scenarios, setScenarios] = useState([
    {
      id: 'current',
      name: 'Situation actuelle',
      adjustments: {},
      results: null,
    },
    {
      ...predefinedScenarios[0],
      results: null,
    },
  ])
  const [activeScenarioIndex, setActiveScenarioIndex] = useState(1)
  const [customAdjustments, setCustomAdjustments] = useState({
    income: 0,
    fixedExpenses: 0,
    variableExpenses: 0,
    debts: 0,
    assets: 0,
  })
  const [timeframe, setTimeframe] = useState(12) // mois
  const [comparisonData, setComparisonData] = useState([])
  // Simuler les scénarios quand ils changent
  useEffect(() => {
    const updatedScenarios = scenarios.map((scenario) => {
      const results = simulateScenario(
        financialData,
        scenario.adjustments,
        timeframe,
      )
      return {
        ...scenario,
        results,
      }
    })
    setScenarios(updatedScenarios)
    // Préparer les données pour le graphique de comparaison
    const comparisonPoints = [0, 3, 6, 9, 12].map((month) => {
      const dataPoint = {
        month: `Mois ${month}`,
      }
      updatedScenarios.forEach((scenario) => {
        if (scenario.results && scenario.results.monthlyProjection[month]) {
          dataPoint[scenario.name] =
            scenario.results.monthlyProjection[month].balance
        }
      })
      return dataPoint
    })
    setComparisonData(comparisonPoints)
  }, [financialData, timeframe])
  const handleScenarioChange = (index) => {
    setActiveScenarioIndex(index)
    // Si c'est un scénario prédéfini, mettre à jour les ajustements personnalisés
    if (index > 0) {
      setCustomAdjustments(scenarios[index].adjustments)
    } else {
      setCustomAdjustments({
        income: 0,
        fixedExpenses: 0,
        variableExpenses: 0,
        debts: 0,
        assets: 0,
      })
    }
  }
  const handleAddScenario = (predefinedIndex) => {
    const newScenario = {
      ...predefinedScenarios[predefinedIndex],
      results: null,
    }
    setScenarios([...scenarios, newScenario])
    setActiveScenarioIndex(scenarios.length)
  }
  const handleCreateCustomScenario = () => {
    const newScenario = {
      id: `custom_${Date.now()}`,
      name: `Scénario personnalisé ${scenarios.length}`,
      adjustments: {
        ...customAdjustments,
      },
      results: null,
    }
    setScenarios([...scenarios, newScenario])
    setActiveScenarioIndex(scenarios.length)
  }
  const handleUpdateAdjustment = (category, value) => {
    setCustomAdjustments((prev) => ({
      ...prev,
      [category]: parseInt(value),
    }))
    // Mettre à jour le scénario actif
    if (activeScenarioIndex > 0) {
      const updatedScenarios = [...scenarios]
      updatedScenarios[activeScenarioIndex] = {
        ...updatedScenarios[activeScenarioIndex],
        adjustments: {
          ...updatedScenarios[activeScenarioIndex].adjustments,
          [category]: parseInt(value),
        },
      }
      setScenarios(updatedScenarios)
    }
  }
  const activeScenario = scenarios[activeScenarioIndex]
  return (
    <div>
      <div className="mb-6">
        <h3 className="text-lg font-medium mb-4">Simulateur "Et si...?"</h3>
        <p className="opacity-80 mb-4">
          Explorez l'impact de différents scénarios financiers sur votre
          situation à court et moyen terme.
        </p>
        <div className="flex flex-wrap gap-2 mb-6">
          {scenarios.map((scenario, index) => (
            <button
              key={scenario.id}
              onClick={() => handleScenarioChange(index)}
              className={`px-4 py-2 rounded-lg ${activeScenarioIndex === index ? `bg-${theme.primary} font-medium` : 'bg-white/10 hover:bg-white/20'}`}
            >
              {scenario.name}
            </button>
          ))}
          <button
            onClick={() => handleCreateCustomScenario()}
            className="px-4 py-2 rounded-lg bg-white/10 hover:bg-white/20 flex items-center"
          >
            <PlusIcon size={16} className="mr-1" />
            Nouveau
          </button>
        </div>
        <div className="bg-white/5 rounded-lg p-4 mb-6">
          <h4 className="font-medium mb-3">Ajustements du scénario</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
            <div>
              <label className="block text-sm mb-1">Revenus</label>
              <div className="flex items-center">
                <button
                  onClick={() =>
                    handleUpdateAdjustment(
                      'income',
                      customAdjustments.income - 1,
                    )
                  }
                  className="p-2 bg-white/10 rounded-l-md hover:bg-white/20"
                >
                  <MinusIcon size={16} />
                </button>
                <input
                  type="number"
                  value={customAdjustments.income}
                  onChange={(e) =>
                    handleUpdateAdjustment('income', e.target.value)
                  }
                  className="w-16 p-2 text-center bg-white/20 border-0 focus:outline-none"
                />
                <button
                  onClick={() =>
                    handleUpdateAdjustment(
                      'income',
                      customAdjustments.income + 1,
                    )
                  }
                  className="p-2 bg-white/10 rounded-r-md hover:bg-white/20"
                >
                  <PlusIcon size={16} />
                </button>
                <span className="ml-2">%</span>
              </div>
            </div>
            <div>
              <label className="block text-sm mb-1">Dépenses fixes</label>
              <div className="flex items-center">
                <button
                  onClick={() =>
                    handleUpdateAdjustment(
                      'fixedExpenses',
                      customAdjustments.fixedExpenses - 1,
                    )
                  }
                  className="p-2 bg-white/10 rounded-l-md hover:bg-white/20"
                >
                  <MinusIcon size={16} />
                </button>
                <input
                  type="number"
                  value={customAdjustments.fixedExpenses}
                  onChange={(e) =>
                    handleUpdateAdjustment('fixedExpenses', e.target.value)
                  }
                  className="w-16 p-2 text-center bg-white/20 border-0 focus:outline-none"
                />
                <button
                  onClick={() =>
                    handleUpdateAdjustment(
                      'fixedExpenses',
                      customAdjustments.fixedExpenses + 1,
                    )
                  }
                  className="p-2 bg-white/10 rounded-r-md hover:bg-white/20"
                >
                  <PlusIcon size={16} />
                </button>
                <span className="ml-2">%</span>
              </div>
            </div>
            <div>
              <label className="block text-sm mb-1">Dépenses variables</label>
              <div className="flex items-center">
                <button
                  onClick={() =>
                    handleUpdateAdjustment(
                      'variableExpenses',
                      customAdjustments.variableExpenses - 1,
                    )
                  }
                  className="p-2 bg-white/10 rounded-l-md hover:bg-white/20"
                >
                  <MinusIcon size={16} />
                </button>
                <input
                  type="number"
                  value={customAdjustments.variableExpenses}
                  onChange={(e) =>
                    handleUpdateAdjustment('variableExpenses', e.target.value)
                  }
                  className="w-16 p-2 text-center bg-white/20 border-0 focus:outline-none"
                />
                <button
                  onClick={() =>
                    handleUpdateAdjustment(
                      'variableExpenses',
                      customAdjustments.variableExpenses + 1,
                    )
                  }
                  className="p-2 bg-white/10 rounded-r-md hover:bg-white/20"
                >
                  <PlusIcon size={16} />
                </button>
                <span className="ml-2">%</span>
              </div>
            </div>
            <div>
              <label className="block text-sm mb-1">Dettes</label>
              <div className="flex items-center">
                <button
                  onClick={() =>
                    handleUpdateAdjustment('debts', customAdjustments.debts - 1)
                  }
                  className="p-2 bg-white/10 rounded-l-md hover:bg-white/20"
                >
                  <MinusIcon size={16} />
                </button>
                <input
                  type="number"
                  value={customAdjustments.debts}
                  onChange={(e) =>
                    handleUpdateAdjustment('debts', e.target.value)
                  }
                  className="w-16 p-2 text-center bg-white/20 border-0 focus:outline-none"
                />
                <button
                  onClick={() =>
                    handleUpdateAdjustment('debts', customAdjustments.debts + 1)
                  }
                  className="p-2 bg-white/10 rounded-r-md hover:bg-white/20"
                >
                  <PlusIcon size={16} />
                </button>
                <span className="ml-2">%</span>
              </div>
            </div>
            <div>
              <label className="block text-sm mb-1">Actifs</label>
              <div className="flex items-center">
                <button
                  onClick={() =>
                    handleUpdateAdjustment(
                      'assets',
                      customAdjustments.assets - 1,
                    )
                  }
                  className="p-2 bg-white/10 rounded-l-md hover:bg-white/20"
                >
                  <MinusIcon size={16} />
                </button>
                <input
                  type="number"
                  value={customAdjustments.assets}
                  onChange={(e) =>
                    handleUpdateAdjustment('assets', e.target.value)
                  }
                  className="w-16 p-2 text-center bg-white/20 border-0 focus:outline-none"
                />
                <button
                  onClick={() =>
                    handleUpdateAdjustment(
                      'assets',
                      customAdjustments.assets + 1,
                    )
                  }
                  className="p-2 bg-white/10 rounded-r-md hover:bg-white/20"
                >
                  <PlusIcon size={16} />
                </button>
                <span className="ml-2">%</span>
              </div>
            </div>
          </div>
          <div className="mt-4">
            <label className="block text-sm mb-1">Période de simulation</label>
            <div className="flex items-center">
              <input
                type="range"
                min="1"
                max="24"
                value={timeframe}
                onChange={(e) => setTimeframe(parseInt(e.target.value))}
                className="w-64 h-2 rounded-lg appearance-none cursor-pointer bg-white/30"
              />
              <span className="ml-4">{timeframe} mois</span>
            </div>
          </div>
        </div>
        {activeScenario.results && (
          <motion.div
            initial={{
              opacity: 0,
              y: 20,
            }}
            animate={{
              opacity: 1,
              y: 0,
            }}
            className="bg-white/5 rounded-lg p-4"
          >
            <h4 className="font-medium mb-3">Résultats de la simulation</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="bg-white/10 p-3 rounded-lg">
                <div className="text-sm opacity-70">
                  Solde après {timeframe} mois
                </div>
                <div className="text-2xl font-bold mt-1">
                  {activeScenario.results.finalBalance.toFixed(2)} €
                </div>
                <div className="flex items-center mt-2">
                  {activeScenario.results.balanceChange > 0 ? (
                    <>
                      <TrendingUpIcon
                        size={16}
                        className="text-green-400 mr-1"
                      />
                      <span className="text-green-400 text-sm">
                        +{activeScenario.results.balanceChange.toFixed(2)} €
                      </span>
                    </>
                  ) : (
                    <>
                      <TrendingDownIcon
                        size={16}
                        className="text-red-400 mr-1"
                      />
                      <span className="text-red-400 text-sm">
                        {activeScenario.results.balanceChange.toFixed(2)} €
                      </span>
                    </>
                  )}
                </div>
              </div>
              <div className="bg-white/10 p-3 rounded-lg">
                <div className="text-sm opacity-70">Économies mensuelles</div>
                <div className="text-2xl font-bold mt-1">
                  {activeScenario.results.monthlySavings.toFixed(2)} €
                </div>
                <div className="text-sm mt-2 opacity-70">
                  {Math.round(activeScenario.results.savingsRate * 100)}% de vos
                  revenus
                </div>
              </div>
              <div className="bg-white/10 p-3 rounded-lg">
                <div className="text-sm opacity-70">
                  Impact sur vos objectifs
                </div>
                <div className="text-2xl font-bold mt-1">
                  {activeScenario.results.goalProgressMonths} mois
                </div>
                <div className="text-sm mt-2 opacity-70">
                  {activeScenario.results.goalProgressMonths < 0
                    ? 'Plus rapide'
                    : 'Plus lent'}{' '}
                  que prévu
                </div>
              </div>
            </div>
            <div className="h-64 mb-4">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={comparisonData}
                  margin={{
                    top: 5,
                    right: 30,
                    left: 20,
                    bottom: 5,
                  }}
                >
                  <CartesianGrid
                    strokeDasharray="3 3"
                    stroke="rgba(255,255,255,0.1)"
                  />
                  <XAxis dataKey="month" stroke="rgba(255,255,255,0.7)" />
                  <YAxis stroke="rgba(255,255,255,0.7)" />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'rgba(0,0,0,0.8)',
                      borderColor: 'rgba(255,255,255,0.2)',
                    }}
                  />
                  <Legend />
                  {scenarios.map((scenario, index) => (
                    <Bar
                      key={scenario.id}
                      dataKey={scenario.name}
                      fill={
                        index === 0
                          ? '#8884d8'
                          : index === 1
                            ? '#82ca9d'
                            : '#ffc658'
                      }
                    />
                  ))}
                </BarChart>
              </ResponsiveContainer>
            </div>
            <div className="p-4 bg-white/10 rounded-lg">
              <h5 className="font-medium mb-2">Analyse de l'impact</h5>
              <p>{activeScenario.results.analysis}</p>
            </div>
          </motion.div>
        )}
      </div>
      <div>
        <h3 className="text-lg font-medium mb-4">Scénarios prédéfinis</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {predefinedScenarios.map((scenario, index) => (
            <button
              key={scenario.id}
              onClick={() => handleAddScenario(index)}
              className="flex items-center justify-between p-4 bg-white/10 rounded-lg hover:bg-white/15 text-left"
            >
              <div>
                <div className="font-medium">{scenario.name}</div>
                <div className="text-sm opacity-70 mt-1">
                  {Object.entries(scenario.adjustments).map(([key, value]) => (
                    <span key={key} className="mr-2">
                      {key}: {value > 0 ? '+' : ''}
                      {value}%
                    </span>
                  ))}
                </div>
              </div>
              <PlusIcon size={20} />
            </button>
          ))}
        </div>
      </div>
    </div>
  )
}

```
```components/ui/HiddenFeesDetector.tsx
import React, { useEffect, useState } from 'react'
import { motion } from 'framer-motion'
import {
  SearchIcon,
  AlertTriangleIcon,
  CheckCircleIcon,
  XCircleIcon,
  InfoIcon,
} from 'lucide-react'
import { detectHiddenFees } from '../../utils/financialCalculations'
import { useTheme } from '../../contexts/ThemeContext'
export const HiddenFeesDetector = ({ financialData, insights }) => {
  const { theme } = useTheme()
  const [hiddenFees, setHiddenFees] = useState([])
  const [isScanning, setIsScanning] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)
  const [potentialSavings, setPotentialSavings] = useState(0)
  const startScan = () => {
    setIsScanning(true)
    setScanProgress(0)
    // Simuler une progression du scan
    const interval = setInterval(() => {
      setScanProgress((prev) => {
        const newProgress = prev + Math.random() * 5
        return newProgress >= 100 ? 100 : newProgress
      })
    }, 100)
    // Simuler la fin du scan après 3 secondes
    setTimeout(() => {
      clearInterval(interval)
      setScanProgress(100)
      // Récupérer les frais cachés détectés
      const detected = detectHiddenFees(financialData)
      setHiddenFees(detected)
      // Calculer les économies potentielles
      const savings = detected.reduce(
        (total, fee) => total + fee.annualImpact,
        0,
      )
      setPotentialSavings(savings)
      setIsScanning(false)
    }, 3000)
  }
  // Lancer un scan automatique au chargement
  useEffect(() => {
    startScan()
  }, [])
  return (
    <div>
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-medium">Détecteur de frais cachés</h3>
          <p className="opacity-80">
            Identifiez les frais inutiles et optimisez vos dépenses
          </p>
        </div>
        <button
          onClick={startScan}
          disabled={isScanning}
          className={`flex items-center px-4 py-2 bg-${theme.primary} hover:bg-opacity-90 rounded-lg ${isScanning ? 'opacity-50 cursor-not-allowed' : ''}`}
        >
          <SearchIcon size={18} className="mr-2" />
          {isScanning ? 'Analyse en cours...' : 'Analyser mes dépenses'}
        </button>
      </div>
      {isScanning && (
        <div className="mb-8">
          <div className="flex items-center justify-between mb-2">
            <span>Analyse de vos transactions</span>
            <span>{Math.round(scanProgress)}%</span>
          </div>
          <div className="w-full h-2 bg-white/20 rounded-full">
            <div
              className={`h-full bg-${theme.accent} rounded-full transition-all duration-200`}
              style={{
                width: `${scanProgress}%`,
              }}
            ></div>
          </div>
          <div className="text-sm mt-2 opacity-70 text-center">
            Recherche de patterns et d'anomalies dans vos transactions...
          </div>
        </div>
      )}
      {!isScanning && hiddenFees.length > 0 && (
        <motion.div
          initial={{
            opacity: 0,
          }}
          animate={{
            opacity: 1,
          }}
        >
          <div className="bg-white/10 rounded-lg p-4 mb-6">
            <div className="flex items-center justify-between">
              <h4 className="font-medium">Résumé des frais cachés détectés</h4>
              <div className="text-lg font-bold">
                {hiddenFees.length} frais identifiés
              </div>
            </div>
            <div className="mt-4 p-4 bg-white/10 rounded-lg">
              <div className="text-center">
                <div className="text-sm opacity-70">
                  Économies potentielles par an
                </div>
                <div className="text-3xl font-bold mt-1">
                  {potentialSavings.toFixed(2)} €
                </div>
                <div className="text-sm mt-2">
                  Soit environ {(potentialSavings / 12).toFixed(2)} € par mois
                </div>
              </div>
            </div>
          </div>
          <div className="space-y-4 mb-6">
            {hiddenFees.map((fee, index) => (
              <motion.div
                key={index}
                initial={{
                  opacity: 0,
                  y: 20,
                }}
                animate={{
                  opacity: 1,
                  y: 0,
                  transition: {
                    delay: index * 0.1,
                  },
                }}
                className="bg-white/5 rounded-lg p-4 border-l-4 border-yellow-500"
              >
                <div className="flex items-start">
                  <div className="bg-yellow-500/20 rounded-full p-2 mr-4">
                    <AlertTriangleIcon size={20} className="text-yellow-500" />
                  </div>
                  <div className="flex-1">
                    <h5 className="font-medium text-lg">{fee.name}</h5>
                    <p className="opacity-80 mt-1">{fee.description}</p>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                      <div>
                        <div className="text-sm opacity-70">Impact mensuel</div>
                        <div className="font-medium">
                          {fee.monthlyImpact.toFixed(2)} €
                        </div>
                      </div>
                      <div>
                        <div className="text-sm opacity-70">Impact annuel</div>
                        <div className="font-medium">
                          {fee.annualImpact.toFixed(2)} €
                        </div>
                      </div>
                      <div>
                        <div className="text-sm opacity-70">
                          Niveau d'optimisation
                        </div>
                        <div className="flex items-center">
                          {fee.optimizationDifficulty === 'easy' && (
                            <span className="text-green-400 flex items-center">
                              <CheckCircleIcon size={16} className="mr-1" />{' '}
                              Facile
                            </span>
                          )}
                          {fee.optimizationDifficulty === 'medium' && (
                            <span className="text-yellow-400 flex items-center">
                              <InfoIcon size={16} className="mr-1" /> Moyen
                            </span>
                          )}
                          {fee.optimizationDifficulty === 'hard' && (
                            <span className="text-red-400 flex items-center">
                              <XCircleIcon size={16} className="mr-1" />{' '}
                              Difficile
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="mt-4 p-3 bg-white/10 rounded-lg">
                      <h6 className="font-medium mb-1">Recommandation</h6>
                      <p className="text-sm">{fee.recommendation}</p>
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
          <div className="bg-white/5 rounded-lg p-4">
            <h4 className="font-medium mb-3">
              Conseils pour éviter les frais cachés
            </h4>
            <ul className="space-y-2 text-sm">
              <li className="flex items-start">
                <span className="inline-block w-4 h-4 mt-1 mr-2 bg-white/20 rounded-full"></span>
                <span>
                  Vérifiez régulièrement vos relevés bancaires pour identifier
                  les prélèvements automatiques oubliés.
                </span>
              </li>
              <li className="flex items-start">
                <span className="inline-block w-4 h-4 mt-1 mr-2 bg-white/20 rounded-full"></span>
                <span>
                  Comparez les offres avant de vous engager dans un contrat à
                  long terme.
                </span>
              </li>
              <li className="flex items-start">
                <span className="inline-block w-4 h-4 mt-1 mr-2 bg-white/20 rounded-full"></span>
                <span>
                  Utilisez des applications de suivi budgétaire pour repérer les
                  anomalies.
                </span>
              </li>
              <li className="flex items-start">
                <span className="inline-block w-4 h-4 mt-1 mr-2 bg-white/20 rounded-full"></span>
                <span>
                  Négociez vos contrats d'assurance et d'abonnements tous les
                  ans.
                </span>
              </li>
            </ul>
          </div>
        </motion.div>
      )}
      {!isScanning && hiddenFees.length === 0 && (
        <div className="text-center py-12">
          <CheckCircleIcon size={48} className="mx-auto mb-4 text-green-400" />
          <h4 className="text-xl font-medium mb-2">
            Aucun frais caché détecté
          </h4>
          <p className="opacity-70">
            Félicitations ! Vos finances semblent bien optimisées.
          </p>
        </div>
      )}
    </div>
  )
}

```
```components/screens/JournalScreen.tsx
import React, { useState } from 'react'
import { motion } from 'framer-motion'
import {
  ArrowLeftIcon,
  SearchIcon,
  CalendarIcon,
  FilterIcon,
  TrashIcon,
  BookmarkIcon,
} from 'lucide-react'
import { format, parseISO } from 'date-fns'
import { fr } from 'date-fns/locale'
import { useTheme } from '../../contexts/ThemeContext'
export const JournalScreen = ({ journal, onLoadExploration, onBack }) => {
  const { theme } = useTheme()
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedFilter, setSelectedFilter] = useState('all')
  const filters = [
    {
      id: 'all',
      label: 'Toutes',
    },
    {
      id: 'month',
      label: 'Ce mois',
    },
    {
      id: 'positive',
      label: 'Positives',
    },
    {
      id: 'negative',
      label: 'Négatives',
    },
  ]
  const filteredJournal = journal.filter((entry) => {
    // Filtre de recherche
    if (
      searchQuery &&
      !entry.question.toLowerCase().includes(searchQuery.toLowerCase())
    ) {
      return false
    }
    // Filtres supplémentaires
    if (selectedFilter === 'month') {
      const entryDate = parseISO(entry.date)
      const now = new Date()
      return (
        entryDate.getMonth() === now.getMonth() &&
        entryDate.getFullYear() === now.getFullYear()
      )
    }
    if (
      selectedFilter === 'positive' &&
      entry.insights &&
      entry.insights.healthIndex < 60
    ) {
      return false
    }
    if (
      selectedFilter === 'negative' &&
      entry.insights &&
      entry.insights.healthIndex >= 60
    ) {
      return false
    }
    return true
  })
  return (
    <motion.div
      initial={{
        opacity: 0,
      }}
      animate={{
        opacity: 1,
      }}
      className="max-w-4xl mx-auto mt-6"
    >
      <div className="flex items-center mb-6">
        <button
          onClick={onBack}
          className="mr-4 p-2 rounded-full bg-white/20 hover:bg-white/30"
        >
          <ArrowLeftIcon size={20} />
        </button>
        <h1 className="text-2xl font-bold">Journal d'Exploration</h1>
      </div>
      <div className="bg-white/10 backdrop-blur-md rounded-xl p-6 mb-6">
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-6">
          <div className="relative flex-1">
            <SearchIcon
              size={18}
              className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50"
            />
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Rechercher une question..."
              className="w-full pl-10 p-3 rounded-lg bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 placeholder-white/50"
            />
          </div>
          <div className="flex items-center space-x-2">
            <FilterIcon size={18} className="text-white/70" />
            <div className="flex bg-white/20 rounded-lg p-1">
              {filters.map((filter) => (
                <button
                  key={filter.id}
                  onClick={() => setSelectedFilter(filter.id)}
                  className={`px-3 py-1 rounded-md text-sm ${selectedFilter === filter.id ? `bg-${theme.primary}` : 'hover:bg-white/10'}`}
                >
                  {filter.label}
                </button>
              ))}
            </div>
          </div>
        </div>
        {filteredJournal.length > 0 ? (
          <div className="space-y-4">
            {filteredJournal.map((entry) => (
              <motion.div
                key={entry.id}
                whileHover={{
                  scale: 1.01,
                }}
                className="p-4 bg-white/10 rounded-lg cursor-pointer hover:bg-white/15"
                onClick={() => onLoadExploration(entry.id)}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h3 className="font-medium">{entry.question}</h3>
                    <div className="flex items-center mt-2 text-sm opacity-70">
                      <CalendarIcon size={14} className="mr-1" />
                      <span>{entry.savedAt}</span>
                    </div>
                  </div>
                  {entry.insights && (
                    <div className="flex flex-col items-end">
                      <div
                        className={`px-2 py-1 rounded-full text-xs ${entry.insights.healthIndex >= 70 ? 'bg-green-500/30 text-green-300' : entry.insights.healthIndex >= 40 ? 'bg-yellow-500/30 text-yellow-300' : 'bg-red-500/30 text-red-300'}`}
                      >
                        Santé: {entry.insights.healthIndex}/100
                      </div>
                      <div className="flex items-center mt-2">
                        <BookmarkIcon size={14} className="mr-1" />
                        <span className="text-xs opacity-70">
                          {Object.values(entry.financialData).flat().length}{' '}
                          éléments
                        </span>
                      </div>
                    </div>
                  )}
                </div>
                {entry.insights && entry.insights.mainInsight && (
                  <div className="mt-3 pt-3 border-t border-white/10">
                    <p className="text-sm italic">
                      {entry.insights.mainInsight}
                    </p>
                  </div>
                )}
              </motion.div>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <p className="text-lg mb-2">Aucune exploration trouvée</p>
            <p className="opacity-70">
              {searchQuery
                ? "Essayez avec d'autres termes de recherche"
                : 'Commencez à explorer pour créer votre journal'}
            </p>
          </div>
        )}
      </div>
    </motion.div>
  )
}

```
```components/screens/LearningScreen.tsx
import React, { useState } from 'react'
import { motion } from 'framer-motion'
import {
  ArrowLeftIcon,
  BookOpenIcon,
  SearchIcon,
  GraduationCapIcon,
  BookIcon,
  AwardIcon,
  ChevronRightIcon,
} from 'lucide-react'
import { useTheme } from '../../contexts/ThemeContext'
export const LearningScreen = ({ onBack, financialData, emotionalContext }) => {
  const { theme } = useTheme()
  const [activeCategory, setActiveCategory] = useState('all')
  const [searchQuery, setSearchQuery] = useState('')
  const categories = [
    {
      id: 'all',
      name: 'Tous les sujets',
    },
    {
      id: 'basics',
      name: 'Bases financières',
    },
    {
      id: 'budgeting',
      name: 'Budgétisation',
    },
    {
      id: 'investing',
      name: 'Investissement',
    },
    {
      id: 'psychology',
      name: 'Psychologie financière',
    },
  ]
  const lessons = [
    {
      id: 'budget_101',
      title: 'Les fondamentaux du budget',
      description:
        'Apprenez à créer et maintenir un budget efficace pour atteindre vos objectifs financiers.',
      category: 'budgeting',
      duration: '10 min',
      level: 'Débutant',
    },
    {
      id: 'emotional_spending',
      title: "L'impact des émotions sur vos dépenses",
      description:
        'Découvrez comment votre état émotionnel influence vos décisions financières et apprenez à prendre le contrôle.',
      category: 'psychology',
      duration: '8 min',
      level: 'Intermédiaire',
    },
    {
      id: 'debt_management',
      title: 'Stratégies de gestion de dette',
      description:
        'Techniques efficaces pour réduire et éliminer vos dettes plus rapidement.',
      category: 'basics',
      duration: '12 min',
      level: 'Débutant',
    },
    {
      id: 'investment_basics',
      title: 'Introduction aux investissements',
      description:
        "Comprendre les différents types d'investissements et comment démarrer avec un petit capital.",
      category: 'investing',
      duration: '15 min',
      level: 'Débutant',
    },
    {
      id: 'savings_optimization',
      title: 'Optimiser son épargne',
      description:
        'Techniques pour maximiser votre épargne et faire travailler votre argent efficacement.',
      category: 'basics',
      duration: '9 min',
      level: 'Intermédiaire',
    },
    {
      id: 'financial_goals',
      title: 'Définir et atteindre des objectifs financiers',
      description:
        'Comment établir des objectifs SMART et créer un plan pour les atteindre.',
      category: 'budgeting',
      duration: '11 min',
      level: 'Débutant',
    },
    {
      id: 'market_psychology',
      title: 'Psychologie des marchés financiers',
      description:
        "Comprendre les biais cognitifs qui affectent vos décisions d'investissement.",
      category: 'psychology',
      duration: '14 min',
      level: 'Avancé',
    },
    {
      id: 'tax_optimization',
      title: 'Optimisation fiscale pour particuliers',
      description:
        'Stratégies légales pour réduire votre charge fiscale et maximiser votre patrimoine.',
      category: 'investing',
      duration: '13 min',
      level: 'Intermédiaire',
    },
  ]
  // Filtrer les leçons en fonction de la catégorie et de la recherche
  const filteredLessons = lessons.filter((lesson) => {
    if (activeCategory !== 'all' && lesson.category !== activeCategory) {
      return false
    }
    if (
      searchQuery &&
      !lesson.title.toLowerCase().includes(searchQuery.toLowerCase()) &&
      !lesson.description.toLowerCase().includes(searchQuery.toLowerCase())
    ) {
      return false
    }
    return true
  })
  // Récupérer les leçons recommandées en fonction des données financières
  const getRecommendedLessons = () => {
    // Logique de recommandation simplifiée
    const hasDebts = financialData.debts && financialData.debts.length > 0
    const hasInvestments =
      financialData.assets &&
      financialData.assets.some((a) => a.type === 'investments')
    const isEmotional = emotionalContext.mood < 5
    const recommendations = []
    if (hasDebts) {
      recommendations.push('debt_management')
    }
    if (!hasInvestments) {
      recommendations.push('investment_basics')
    }
    if (isEmotional) {
      recommendations.push('emotional_spending')
    }
    // Si pas assez de recommandations, ajouter les fondamentaux
    if (recommendations.length < 2) {
      recommendations.push('budget_101')
    }
    return lessons.filter((lesson) => recommendations.includes(lesson.id))
  }
  const recommendedLessons = getRecommendedLessons()
  return (
    <motion.div
      initial={{
        opacity: 0,
      }}
      animate={{
        opacity: 1,
      }}
      className="max-w-4xl mx-auto mt-6"
    >
      <div className="flex items-center mb-6">
        <button
          onClick={onBack}
          className="mr-4 p-2 rounded-full bg-white/20 hover:bg-white/30"
        >
          <ArrowLeftIcon size={20} />
        </button>
        <h1 className="text-2xl font-bold">Centre d'Apprentissage</h1>
      </div>
      <div className="bg-white/10 backdrop-blur-md rounded-xl p-6 mb-6">
        <h2 className="text-xl font-medium mb-4 flex items-center">
          <GraduationCapIcon
            size={24}
            className={`mr-2 text-${theme.accent}`}
          />
          Recommandé pour vous
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          {recommendedLessons.map((lesson) => (
            <motion.div
              key={lesson.id}
              whileHover={{
                scale: 1.02,
              }}
              className={`p-4 rounded-lg cursor-pointer border-l-4 border-${theme.accent} bg-white/10`}
            >
              <div className="flex justify-between items-start">
                <h3 className="font-medium">{lesson.title}</h3>
                <span
                  className={`px-2 py-0.5 text-xs rounded-full bg-${theme.primary}/30`}
                >
                  {lesson.level}
                </span>
              </div>
              <p className="text-sm mt-2 opacity-80">{lesson.description}</p>
              <div className="mt-3 flex items-center justify-between">
                <span className="text-xs opacity-70">
                  {lesson.duration} de lecture
                </span>
                <button className="flex items-center text-sm">
                  <span>Commencer</span>
                  <ChevronRightIcon size={16} className="ml-1" />
                </button>
              </div>
            </motion.div>
          ))}
        </div>
        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-6">
          <div className="relative flex-1">
            <SearchIcon
              size={18}
              className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50"
            />
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Rechercher un sujet..."
              className="w-full pl-10 p-3 rounded-lg bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 placeholder-white/50"
            />
          </div>
          <div className="flex items-center space-x-2 overflow-x-auto pb-2 scrollbar-thin scrollbar-thumb-white/20 scrollbar-track-transparent">
            <BookIcon size={18} className="text-white/70 flex-shrink-0" />
            <div className="flex bg-white/20 rounded-lg p-1">
              {categories.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setActiveCategory(category.id)}
                  className={`px-3 py-1 rounded-md text-sm whitespace-nowrap ${activeCategory === category.id ? `bg-${theme.primary}` : 'hover:bg-white/10'}`}
                >
                  {category.name}
                </button>
              ))}
            </div>
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredLessons.map((lesson) => (
            <motion.div
              key={lesson.id}
              whileHover={{
                scale: 1.02,
              }}
              className="p-4 bg-white/10 rounded-lg cursor-pointer hover:bg-white/15"
            >
              <div className="flex justify-between items-start">
                <h3 className="font-medium">{lesson.title}</h3>
                <span
                  className={`px-2 py-0.5 text-xs rounded-full ${lesson.level === 'Débutant' ? 'bg-green-500/30 text-green-300' : lesson.level === 'Intermédiaire' ? 'bg-yellow-500/30 text-yellow-300' : 'bg-red-500/30 text-red-300'}`}
                >
                  {lesson.level}
                </span>
              </div>
              <p className="text-sm mt-2 opacity-80">{lesson.description}</p>
              <div className="mt-3 flex items-center justify-between">
                <span className="text-xs opacity-70">
                  {lesson.duration} de lecture
                </span>
                <button
                  className={`text-xs bg-${theme.primary} px-2 py-1 rounded-full`}
                >
                  Lire
                </button>
              </div>
            </motion.div>
          ))}
        </div>
        {filteredLessons.length === 0 && (
          <div className="text-center py-12">
            <p className="text-lg mb-2">Aucun contenu trouvé</p>
            <p className="opacity-70">
              Essayez avec d'autres termes de recherche ou catégories
            </p>
          </div>
        )}
      </div>
      <div className="bg-white/10 backdrop-blur-md rounded-xl p-6">
        <h2 className="text-xl font-medium mb-4 flex items-center">
          <AwardIcon size={24} className={`mr-2 text-${theme.accent}`} />
          Votre progression
        </h2>
        <div className="bg-white/5 rounded-lg p-4">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h3 className="font-medium">Niveau de compétence financière</h3>
              <p className="text-sm opacity-80 mt-1">
                Continuez à apprendre pour progresser
              </p>
            </div>
            <div className="text-2xl font-bold">Débutant</div>
          </div>
          <div className="flex items-center justify-between text-sm mb-2">
            <span>0 cours complétés</span>
            <span>10 cours pour le niveau suivant</span>
          </div>
          <div className="relative h-2 bg-white/20 rounded-full">
            <div
              className={`absolute left-0 top-0 h-full bg-${theme.accent} rounded-full`}
              style={{
                width: '0%',
              }}
            ></div>
          </div>
        </div>
      </div>
    </motion.div>
  )
}

```
```utils/exportUtils.ts
import html2canvas from 'html2canvas'
import { jsPDF } from 'jspdf'

// Exporter les données en PDF
export const exportToPDF = async (data) => {
  try {
    // Créer un élément temporaire pour le rendu HTML
    const tempElement = document.createElement('div')
    tempElement.className = 'pdf-export'
    tempElement.style.width = '600px'
    tempElement.style.padding = '20px'
    tempElement.style.backgroundColor = 'white'
    tempElement.style.color = 'black'
    tempElement.style.position = 'absolute'
    tempElement.style.left = '-9999px'

    // Ajouter le contenu HTML
    tempElement.innerHTML = `
      <div style="font-family: Arial, sans-serif;">
        <h1 style="color: #4F46E5; text-align: center; margin-bottom: 20px;">Rapport Financier Rivela</h1>
        <div style="margin-bottom: 30px; border-bottom: 1px solid #ccc; padding-bottom: 20px;">
          <h2 style="color: #4F46E5;">Votre question</h2>
          <p style="font-size: 16px;">${data.question}</p>
        </div>
        <div style="margin-bottom: 30px; border-bottom: 1px solid #ccc; padding-bottom: 20px;">
          <h2 style="color: #4F46E5;">Insight principal</h2>
          <p style="font-size: 16px;">${data.insights.mainInsight}</p>
        </div>
        <div style="margin-bottom: 30px; border-bottom: 1px solid #ccc; padding-bottom: 20px;">
          <h2 style="color: #4F46E5;">Résumé de votre situation</h2>
          <ul style="padding-left: 20px;">
            ${data.insights.summary.map((point) => `<li style="margin-bottom: 10px;">${point}</li>`).join('')}
          </ul>
        </div>
        <div style="margin-bottom: 30px; border-bottom: 1px solid #ccc; padding-bottom: 20px;">
          <h2 style="color: #4F46E5;">Recommandations</h2>
          <ul style="padding-left: 20px;">
            ${data.insights.recommendations
              .map(
                (rec) => `
              <li style="margin-bottom: 15px;">
                <strong>${rec.title}</strong>
                <p>${rec.description}</p>
              </li>
            `,
              )
              .join('')}
          </ul>
        </div>
        <div style="margin-bottom: 30px; border-bottom: 1px solid #ccc; padding-bottom: 20px;">
          <h2 style="color: #4F46E5;">Métriques clés</h2>
          <table style="width: 100%; border-collapse: collapse;">
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #eee;"><strong>Indice de santé financière</strong></td>
              <td style="padding: 10px; border-bottom: 1px solid #eee;">${data.insights.healthIndex}/100</td>
            </tr>
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #eee;"><strong>Revenus mensuels</strong></td>
              <td style="padding: 10px; border-bottom: 1px solid #eee;">${data.insights.monthlyIncome.toFixed(2)} €</td>
            </tr>
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #eee;"><strong>Dépenses mensuelles</strong></td>
              <td style="padding: 10px; border-bottom: 1px solid #eee;">${data.insights.monthlyExpenses.toFixed(2)} €</td>
            </tr>
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #eee;"><strong>Solde mensuel</strong></td>
              <td style="padding: 10px; border-bottom: 1px solid #eee;">${data.insights.monthlyBalance.toFixed(2)} €</td>
            </tr>
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #eee;"><strong>Taux d'épargne</strong></td>
              <td style="padding: 10px; border-bottom: 1px solid #eee;">${data.insights.savingsRate.toFixed(1)} %</td>
            </tr>
          </table>
        </div>
        <div style="text-align: center; margin-top: 30px; font-size: 12px; color: #666;">
          <p>Rapport généré par Rivela - Explorateur Financier</p>
          <p>Ce rapport est basé sur les données fournies le ${new Date().toLocaleDateString()}</p>
        </div>
      </div>
    `

    // Ajouter l'élément au DOM
    document.body.appendChild(tempElement)

    // Convertir en canvas
    const canvas = await html2canvas(tempElement, {
      scale: 2,
      logging: false,
      useCORS: true,
    })

    // Créer le PDF
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
    })

    const imgData = canvas.toDataURL('image/png')
    const imgWidth = 210
    const imgHeight = (canvas.height * imgWidth) / canvas.width

    // Ajouter l'image au PDF
    pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight)

    // Télécharger le PDF
    pdf.save('rivela-rapport-financier.pdf')

    // Supprimer l'élément temporaire
    document.body.removeChild(tempElement)
  } catch (error) {
    console.error("Erreur lors de l'export PDF:", error)
    alert(
      'Une erreur est survenue lors de la génération du PDF. Veuillez réessayer.',
    )
  }
}

// Partager par email
export const shareByEmail = (data) => {
  try {
    // Construire le corps de l'email
    const subject = encodeURIComponent('Mon rapport financier Rivela')
    const body = encodeURIComponent(`
Bonjour,
Voici mon rapport financier généré par Rivela - Explorateur Financier.
Ma question: ${data.question}
Insight principal:
${data.insights.mainInsight}
Résumé de ma situation:
${data.insights.summary.map((point) => `- ${point}`).join('\n')}
Indice de santé financière: ${data.insights.healthIndex}/100
Cordialement,
    `)

    // Ouvrir le client mail
    window.location.href = `mailto:?subject=${subject}&body=${body}`
  } catch (error) {
    console.error('Erreur lors du partage par email:', error)
    alert(
      'Une erreur est survenue lors du partage par email. Veuillez réessayer.',
    )
  }
}

```
```utils/financialCalculations.js
// Fonctions d'analyse financière avancées
/**
 * Calcule des insights financiers basés sur les données utilisateur
 * @param {Object} financialData - Données financières de l'utilisateur
 * @param {Object} emotionalContext - Contexte émotionnel de l'utilisateur
 * @returns {Object} - Insights financiers
 */
export function calculateInsights(financialData, emotionalContext) {
  // Extraction et normalisation des données
  const income = calculateTotalMonthlyIncome(financialData.income || []);
  const fixedExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []);
  const variableExpenses = calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  const totalExpenses = fixedExpenses + variableExpenses;
  const debts = calculateTotalDebts(financialData.debts || []);
  const assets = calculateTotalAssets(financialData.assets || []);
  const goals = financialData.goals || [];
  const monthlyBalance = income - totalExpenses;
  const savingsRate = income > 0 ? (monthlyBalance / income) * 100 : 0;
  // Calcul de l'indice de santé financière (0-100)
  const healthIndex = calculateHealthIndex(
    income,
    totalExpenses,
    fixedExpenses,
    variableExpenses,
    debts,
    assets,
    emotionalContext
  );
  // Générer des insights personnalisés
  const expenseBreakdown = generateExpenseBreakdown(financialData);
  const trends = generateTrends(financialData);
  const recommendations = generateRecommendations(
    financialData,
    emotionalContext,
    healthIndex,
    savingsRate
  );
  const comparisons = generateComparisons(financialData);
  const learningItems = generateLearningItems(financialData, emotionalContext, healthIndex);
  const alerts = generateAlerts(financialData, emotionalContext);
  // Prédictions et projections
  const predictionData = generatePredictions(financialData, emotionalContext);
  const spendingCategories = categorizeExpenses(financialData);
  const incomeBreakdown = categorizeIncome(financialData);
  const expensesByCategory = generateExpensesByCategory(financialData);
  const peerComparison = generatePeerComparison(financialData);
  const goalProgress = calculateGoalProgress(financialData);
  // Concepts financiers et suggestions
  const financialConcepts = generateFinancialConcepts(financialData, emotionalContext);
  const suggestedGoals = generateSuggestedGoals(financialData, emotionalContext);
  // Insight principal basé sur l'analyse globale
  const mainInsight = generateMainInsight(
    financialData,
    emotionalContext,
    healthIndex,
    monthlyBalance,
    savingsRate
  );
  // Résumé de la situation financière
  const summary = generateSummary(
    financialData,
    emotionalContext,
    healthIndex,
    monthlyBalance,
    savingsRate
  );
  // Valeurs recommandées
  const recommendedSavingsRate = calculateRecommendedSavingsRate(financialData);
  return {
    healthIndex,
    mainInsight,
    summary,
    recommendations,
    prediction: predictionData.prediction,
    predictionData,
    expenseBreakdown,
    trends,
    comparisons,
    alerts,
    learningItems,
    monthlyIncome: income,
    monthlyExpenses: totalExpenses,
    monthlyBalance,
    savingsRate,
    monthlySavings: Math.max(0, monthlyBalance),
    spendingCategories,
    incomeBreakdown,
    expensesByCategory,
    peerComparison,
    peerAnalysis: generatePeerAnalysis(financialData),
    goalProgress,
    financialConcepts,
    suggestedGoals,
    recommendedSavingsRate
  };
}
/**
 * Calcule l'indice de santé financière
 */
function calculateHealthIndex(
  income,
  expenses,
  fixedExpenses,
  variableExpenses,
  debts,
  assets,
  emotionalContext
) {
  // Base: ratio revenu/dépenses (0-40 points)
  let healthIndex = 0;
  const expenseRatio = expenses / income;
  if (income === 0) {
    healthIndex += 0;
  } else if (expenseRatio <= 0.5) {
    healthIndex += 40;
  } else if (expenseRatio <= 0.7) {
    healthIndex += 35;
  } else if (expenseRatio <= 0.85) {
    healthIndex += 25;
  } else if (expenseRatio <= 1) {
    healthIndex += 15;
  } else {
    healthIndex += 5;
  }
  // Ratio dépenses fixes/variables (0-20 points)
  const totalExpenses = fixedExpenses + variableExpenses;
  const fixedRatio = totalExpenses > 0 ? fixedExpenses / totalExpenses : 0;
  if (fixedRatio <= 0.5) {
    healthIndex += 20;
  } else if (fixedRatio <= 0.6) {
    healthIndex += 15;
  } else if (fixedRatio <= 0.7) {
    healthIndex += 10;
  } else if (fixedRatio <= 0.8) {
    healthIndex += 5;
  }
  // Ratio dette/revenu (0-20 points)
  const debtToIncomeRatio = income > 0 ? debts / (income * 12) : 999;
  if (debtToIncomeRatio <= 0.1) {
    healthIndex += 20;
  } else if (debtToIncomeRatio <= 0.3) {
    healthIndex += 15;
  } else if (debtToIncomeRatio <= 0.5) {
    healthIndex += 10;
  } else if (debtToIncomeRatio <= 1) {
    healthIndex += 5;
  }
  // Actifs (0-15 points)
  const monthsOfExpensesCovered = expenses > 0 ? assets / expenses : 0;
  if (monthsOfExpensesCovered >= 6) {
    healthIndex += 15;
  } else if (monthsOfExpensesCovered >= 3) {
    healthIndex += 10;
  } else if (monthsOfExpensesCovered >= 1) {
    healthIndex += 5;
  }
  // Facteur émotionnel (-5 à +5 points)
  const emotionalFactor = calculateEmotionalFactor(emotionalContext);
  healthIndex += emotionalFactor;
  // Limiter l'indice entre 0 et 100
  return Math.min(100, Math.max(0, Math.round(healthIndex)));
}
/**
 * Calcule l'impact émotionnel sur la santé financière
 */
function calculateEmotionalFactor(emotionalContext) {
  let factor = 0;
  // Impact de l'humeur (-3 à +3)
  const mood = emotionalContext.mood || 5;
  if (mood >= 8) factor += 3;
  else if (mood >= 6) factor += 1;
  else if (mood <= 3) factor -= 3;
  else if (mood <= 5) factor -= 1;
  // Impact des tags émotionnels (-2 à +2)
  const tags = emotionalContext.tags || [];
  const negativeTags = ['Stress au travail', 'Fatigue', 'Fin de mois difficile', 'Inquiétude économique'];
  const positiveTags = ['Optimisme financier', 'Événement familial'];
  for (const tag of tags) {
    if (negativeTags.includes(tag)) factor -= 0.5;
    if (positiveTags.includes(tag)) factor += 0.5;
  }
  // Limiter entre -5 et +5
  return Math.min(5, Math.max(-5, factor));
}
/**
 * Calcule le revenu mensuel total
 */
function calculateTotalMonthlyIncome(incomeItems) {
  return incomeItems.reduce((total, item) => {
    const monthlyAmount = convertToMonthlyAmount(item.amount, item.frequency);
    return total + monthlyAmount;
  }, 0);
}
/**
 * Calcule les dépenses mensuelles totales
 */
function calculateTotalMonthlyAmount(items) {
  return items.reduce((total, item) => {
    const monthlyAmount = convertToMonthlyAmount(item.amount, item.frequency);
    return total + monthlyAmount;
  }, 0);
}
/**
 * Convertit un montant à sa valeur mensuelle
 */
function convertToMonthlyAmount(amount, frequency) {
  switch (frequency) {
    case 'daily':
      return amount * 30;
    case 'weekly':
      return amount * 4.33;
    case 'monthly':
      return amount;
    case 'yearly':
      return amount / 12;
    case 'once':
      return 0; // Les paiements ponctuels ne sont pas comptés comme revenu/dépense mensuel
    default:
      return amount;
  }
}
/**
 * Calcule la dette totale
 */
function calculateTotalDebts(debts) {
  return debts.reduce((total, debt) => total + debt.amount, 0);
}
/**
 * Calcule les actifs totaux
 */
function calculateTotalAssets(assets) {
  return assets.reduce((total, asset) => total + asset.value, 0);
}
/**
 * Génère une répartition des dépenses
 */
function generateExpenseBreakdown(financialData) {
  const fixedExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []);
  const variableExpenses = calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  const total = fixedExpenses + variableExpenses;
  // Si pas de dépenses, renvoyer des données par défaut
  if (total === 0) {
    return [
      { name: 'Dépenses fixes', value: 1 },
      { name: 'Dépenses variables', value: 1 }
    ];
  }
  // Catégoriser les dépenses fixes
  const housing = financialData.fixedExpenses?.filter(e => 
    e.name.toLowerCase().includes('loyer') || 
    e.name.toLowerCase().includes('hypothèque') ||
    e.name.toLowerCase().includes('prêt immobilier')
  ).reduce((sum, e) => sum + convertToMonthlyAmount(e.amount, e.frequency), 0) || 0;
  const utilities = financialData.fixedExpenses?.filter(e => 
    e.name.toLowerCase().includes('électricité') || 
    e.name.toLowerCase().includes('eau') ||
    e.name.toLowerCase().includes('gaz') ||
    e.name.toLowerCase().includes('internet') ||
    e.name.toLowerCase().includes('téléphone')
  ).reduce((sum, e) => sum + convertToMonthlyAmount(e.amount, e.frequency), 0) || 0;
  const otherFixed = fixedExpenses - housing - utilities;
  // Catégoriser les dépenses variables
  const food = financialData.variableExpenses?.filter(e => 
    e.name.toLowerCase().includes('course') || 
    e.name.toLowerCase().includes('alimentation') ||
    e.name.toLowerCase().includes('restaurant') ||
    e.name.toLowerCase().includes('nourriture')
  ).reduce((sum, e) => sum + convertToMonthlyAmount(e.amount, e.frequency), 0) || 0;
  const entertainment = financialData.variableExpenses?.filter(e => 
    e.name.toLowerCase().includes('loisir') || 
    e.name.toLowerCase().includes('sortie') ||
    e.name.toLowerCase().includes('cinéma') ||
    e.name.toLowerCase().includes('streaming') ||
    e.name.toLowerCase().includes('abonnement')
  ).reduce((sum, e) => sum + convertToMonthlyAmount(e.amount, e.frequency), 0) || 0;
  const otherVariable = variableExpenses - food - entertainment;
  return [
    { name: 'Logement', value: housing || 0.01 },
    { name: 'Services', value: utilities || 0.01 },
    { name: 'Autres fixes', value: otherFixed || 0.01 },
    { name: 'Alimentation', value: food || 0.01 },
    { name: 'Loisirs', value: entertainment || 0.01 },
    { name: 'Autres variables', value: otherVariable || 0.01 }
  ];
}
/**
 * Génère des tendances financières sur 6 mois
 */
function generateTrends(financialData) {
  const monthlyIncome = calculateTotalMonthlyIncome(financialData.income || []);
  const monthlyExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []) + 
                         calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  const balance = monthlyIncome - monthlyExpenses;
  // Générer des données de tendance réalistes avec des variations
  return [
    { name: 'Jan', revenus: applyVariation(monthlyIncome, -5), depenses: applyVariation(monthlyExpenses, -2), solde: applyVariation(balance, -10) },
    { name: 'Fév', revenus: applyVariation(monthlyIncome, -2), depenses: applyVariation(monthlyExpenses, 0), solde: applyVariation(balance, -5) },
    { name: 'Mar', revenus: applyVariation(monthlyIncome, 0), depenses: applyVariation(monthlyExpenses, 3), solde: applyVariation(balance, -8) },
    { name: 'Avr', revenus: applyVariation(monthlyIncome, 0), depenses: applyVariation(monthlyExpenses, -3), solde: applyVariation(balance, 5) },
    { name: 'Mai', revenus: applyVariation(monthlyIncome, 3), depenses: applyVariation(monthlyExpenses, 2), solde: applyVariation(balance, 3) },
    { name: 'Juin', revenus: applyVariation(monthlyIncome, 5), depenses: applyVariation(monthlyExpenses, 0), solde: applyVariation(balance, 10) }
  ];
}
/**
 * Applique une variation en pourcentage à une valeur
 */
function applyVariation(value, percentVariation) {
  const variation = 1 + (percentVariation / 100);
  return Math.max(0, value * variation);
}
/**
 * Génère des recommandations personnalisées
 */
function generateRecommendations(financialData, emotionalContext, healthIndex, savingsRate) {
  const income = calculateTotalMonthlyIncome(financialData.income || []);
  const fixedExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []);
  const variableExpenses = calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  const totalExpenses = fixedExpenses + variableExpenses;
  const recommendations = [];
  // Recommandations basées sur le ratio dépenses/revenus
  if (totalExpenses > income * 0.9) {
    recommendations.push({
      title: "Réduire vos dépenses variables",
      description: "Identifiez les dépenses non essentielles que vous pourriez réduire pour améliorer votre solde mensuel."
    });
  }
  // Recommandations basées sur le ratio dépenses fixes/variables
  if (fixedExpenses > totalExpenses * 0.7) {
    recommendations.push({
      title: "Optimiser vos charges fixes",
      description: "Vos charges fixes représentent une part importante de votre budget. Envisagez de renégocier certains contrats."
    });
  }
  // Recommandations basées sur l'épargne
  if (savingsRate < 10) {
    recommendations.push({
      title: "Augmenter votre taux d'épargne",
      description: `Essayez d'épargner au moins 10% de vos revenus pour constituer un fonds d'urgence et atteindre vos objectifs.`
    });
  }
  // Recommandations basées sur les dettes
  if (financialData.debts && financialData.debts.length > 0) {
    recommendations.push({
      title: "Stratégie de remboursement de dettes",
      description: "Concentrez-vous sur les dettes à taux d'intérêt élevé tout en maintenant les paiements minimums sur les autres."
    });
  }
  // Recommandations basées sur les objectifs
  if (!financialData.goals || financialData.goals.length === 0) {
    recommendations.push({
      title: "Définir des objectifs financiers",
      description: "Établissez des objectifs financiers clairs pour donner une direction à votre épargne et vos investissements."
    });
  }
  // Recommandations basées sur le contexte émotionnel
  if (emotionalContext.mood < 5) {
    recommendations.push({
      title: "Gérer le stress financier",
      description: "Le stress peut affecter vos décisions financières. Considérez des techniques de mindfulness et de planification pour réduire l'anxiété."
    });
  }
  // Ajout de recommandations générales si nécessaire
  if (recommendations.length < 3) {
    recommendations.push({
      title: "Automatiser votre épargne",
      description: "Mettez en place des virements automatiques vers votre compte d'épargne juste après réception de votre salaire."
    });
    recommendations.push({
      title: "Diversifier vos sources de revenus",
      description: "Explorez des possibilités de revenus complémentaires pour augmenter votre capacité d'épargne et réduire les risques."
    });
  }
  return recommendations;
}
/**
 * Génère des comparaisons tangibles pour contextualiser les finances
 */
function generateComparisons(financialData) {
  const monthlyBalance = calculateTotalMonthlyIncome(financialData.income || []) - 
                        (calculateTotalMonthlyAmount(financialData.fixedExpenses || []) + 
                         calculateTotalMonthlyAmount(financialData.variableExpenses || []));
  const yearlyBalance = monthlyBalance * 12;
  return [
    {
      emoji: "✈️",
      title: `${Math.abs(yearlyBalance) > 5000 ? "Voyage de luxe" : "Week-end en Europe"}`,
      description: `Votre solde annuel (${yearlyBalance.toFixed(2)}€) équivaut à ${Math.abs(yearlyBalance) > 5000 ? "un voyage de luxe pour deux" : "plusieurs week-ends en Europe"}.`
    },
    {
      emoji: "🏠",
      title: "Apport immobilier",
      description: `En ${Math.max(1, Math.round(50000 / Math.max(100, yearlyBalance)))} ans d'épargne à ce rythme, vous pourriez constituer un apport pour un achat immobilier.`
    },
    {
      emoji: "🚗",
      title: "Mobilité",
      description: `Votre épargne mensuelle (${monthlyBalance.toFixed(2)}€) représente ${(monthlyBalance / 150).toFixed(1)} pleins d'essence ou ${(monthlyBalance / 75).toFixed(1)} trajets en train.`
    }
  ];
}
/**
 * Génère des prédictions financières sur 12 mois
 */
function generatePredictions(financialData, emotionalContext) {
  const monthlyIncome = calculateTotalMonthlyIncome(financialData.income || []);
  const monthlyExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []) + 
                         calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  const monthlyBalance = monthlyIncome - monthlyExpenses;
  // Calculer une projection avec des variations réalistes
  const projectedMonths = [];
  let currentBalance = 0;
  for (let i = 0; i <= 12; i++) {
    // Ajouter des variations réalistes aux revenus et dépenses
    const monthIncomeVariation = (Math.random() * 4) - 1; // -1% à +3%
    const monthExpenseVariation = (Math.random() * 5) - 1; // -1% à +4%
    const monthIncome = monthlyIncome * (1 + (monthIncomeVariation / 100));
    const monthExpense = monthlyExpenses * (1 + (monthExpenseVariation / 100));
    const balance = monthIncome - monthExpense;
    currentBalance += balance;
    projectedMonths.push({
      month: i,
      income: monthIncome,
      expenses: monthExpense,
      monthlyBalance: balance,
      balance: currentBalance
    });
  }
  const currentValue = 0;
  const futureValue = Math.round(currentBalance);
  const growthPercentage = futureValue > 0 ? 100 : 0;
  // Générer une prédiction textuelle
  let prediction = "";
  if (futureValue > 5000) {
    prediction = `En continuant ainsi, vous pourriez épargner environ ${futureValue.toFixed(0)}€ sur les 12 prochains mois, ce qui représente une excellente progression financière.`;
  } else if (futureValue > 0) {
    prediction = `Votre épargne projetée sur 12 mois est d'environ ${futureValue.toFixed(0)}€. C'est positif, mais vous pourriez optimiser davantage votre budget pour accélérer votre progression.`;
  } else {
    prediction = `Attention, votre situation actuelle pourrait mener à un déficit d'environ ${Math.abs(futureValue).toFixed(0)}€ dans 12 mois. Des ajustements budgétaires semblent nécessaires.`;
  }
  return {
    monthlyProjection: projectedMonths,
    currentValue,
    futureValue,
    growthPercentage,
    prediction
  };
}
/**
 * Génère des éléments d'apprentissage personnalisés
 */
function generateLearningItems(financialData, emotionalContext, healthIndex) {
  const items = [];
  // Éléments d'apprentissage basés sur la santé financière
  if (healthIndex < 40) {
    items.push({
      title: "Reconstruire des bases financières solides",
      description: "Apprenez les techniques essentielles pour reprendre le contrôle de vos finances et établir un plan de redressement efficace."
    });
  }
  // Éléments basés sur le ratio dépenses/revenus
  const income = calculateTotalMonthlyIncome(financialData.income || []);
  const expenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []) + 
                  calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  if (expenses > income * 0.9) {
    items.push({
      title: "Techniques de réduction des dépenses",
      description: "Découvrez des méthodes pour identifier et éliminer les dépenses superflues sans sacrifier votre qualité de vie."
    });
  }
  // Éléments basés sur les dettes
  if (financialData.debts && financialData.debts.length > 0) {
    items.push({
      title: "Stratégies de remboursement de dettes",
      description: "Comparez les méthodes 'boule de neige' et 'avalanche' pour déterminer la meilleure approche pour votre situation."
    });
  }
  // Éléments basés sur l'absence d'actifs
  if (!financialData.assets || financialData.assets.length === 0) {
    items.push({
      title: "Construire votre patrimoine étape par étape",
      description: "Guide pour démarrer la constitution d'un patrimoine, même avec des ressources limitées."
    });
  }
  // Éléments basés sur le contexte émotionnel
  if (emotionalContext.mood < 5) {
    items.push({
      title: "Psychologie financière et bien-être",
      description: "Comment votre état d'esprit influence vos décisions financières et techniques pour maintenir une relation saine avec l'argent."
    });
  }
  // Ajouter des éléments généraux si nécessaire
  if (items.length < 3) {
    items.push({
      title: "Bases de l'investissement à long terme",
      description: "Principes fondamentaux pour faire fructifier votre épargne sur la durée avec des risques maîtrisés."
    });
    items.push({
      title: "Optimisation fiscale pour particuliers",
      description: "Comprendre les dispositifs fiscaux à votre disposition pour réduire légalement votre imposition."
    });
  }
  return items;
}
/**
 * Génère des alertes financières
 */
function generateAlerts(financialData, emotionalContext) {
  const alerts = [];
  const income = calculateTotalMonthlyIncome(financialData.income || []);
  const fixedExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []);
  const variableExpenses = calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  const totalExpenses = fixedExpenses + variableExpenses;
  // Alerte si dépenses > revenus
  if (totalExpenses > income) {
    alerts.push({
      title: "Déficit budgétaire",
      description: `Vos dépenses mensuelles dépassent vos revenus de ${(totalExpenses - income).toFixed(2)}€. Cette situation n'est pas soutenable à long terme.`
    });
  }
  // Alerte si dépenses fixes trop élevées
  if (fixedExpenses > income * 0.6) {
    alerts.push({
      title: "Charges fixes élevées",
      description: `Vos charges fixes représentent ${((fixedExpenses / income) * 100).toFixed(0)}% de vos revenus, ce qui limite votre flexibilité financière.`
    });
  }
  // Alerte si pas de fonds d'urgence
  const emergencyFund = financialData.assets?.find(a => 
    a.name.toLowerCase().includes('urgence') || 
    a.name.toLowerCase().includes('secours') ||
    a.name.toLowerCase().includes('épargne')
  );
  if (!emergencyFund && totalExpenses > 0) {
    alerts.push({
      title: "Absence de fonds d'urgence",
      description: "Vous ne semblez pas disposer d'un fonds d'urgence, ce qui vous expose en cas d'imprévus financiers."
    });
  }
  // Alerte si dettes importantes
  const totalDebt = calculateTotalDebts(financialData.debts || []);
  if (totalDebt > income * 6) {
    alerts.push({
      title: "Niveau d'endettement élevé",
      description: `Votre endettement représente plus de 6 mois de revenus, ce qui peut constituer un risque financier.`
    });
  }
  // Alerte basée sur le contexte émotionnel
  if (emotionalContext.mood < 4 && emotionalContext.tags.some(tag => 
    tag.includes('Stress') || 
    tag.includes('Inquiétude') || 
    tag.includes('Fatigue')
  )) {
    alerts.push({
      title: "Risque de décisions émotionnelles",
      description: "Votre état émotionnel actuel pourrait vous amener à prendre des décisions financières sous l'influence du stress."
    });
  }
  return alerts;
}
/**
 * Catégorise les dépenses pour le graphique
 */
function categorizeExpenses(financialData) {
  const fixedExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []);
  const variableExpenses = calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  const totalExpenses = fixedExpenses + variableExpenses;
  // Si pas de dépenses, renvoyer des données par défaut
  if (totalExpenses === 0) {
    return [
      { name: 'Logement', value: 40 },
      { name: 'Alimentation', value: 20 },
      { name: 'Transport', value: 15 },
      { name: 'Loisirs', value: 10 },
      { name: 'Santé', value: 8 },
      { name: 'Divers', value: 7 }
    ];
  }
  // Catégorisation des dépenses
  return [
    { name: 'Logement', value: Math.max(0.1, (fixedExpenses * 0.6) / totalExpenses * 100) },
    { name: 'Alimentation', value: Math.max(0.1, (variableExpenses * 0.4) / totalExpenses * 100) },
    { name: 'Transport', value: Math.max(0.1, (fixedExpenses * 0.2 + variableExpenses * 0.1) / totalExpenses * 100) },
    { name: 'Loisirs', value: Math.max(0.1, (variableExpenses * 0.3) / totalExpenses * 100) },
    { name: 'Santé', value: Math.max(0.1, (fixedExpenses * 0.1 + variableExpenses * 0.1) / totalExpenses * 100) },
    { name: 'Divers', value: Math.max(0.1, (fixedExpenses * 0.1 + variableExpenses * 0.1) / totalExpenses * 100) }
  ];
}
/**
 * Catégorise les revenus pour le graphique
 */
function categorizeIncome(financialData) {
  const totalIncome = calculateTotalMonthlyIncome(financialData.income || []);
  // Si pas de revenus, renvoyer des données par défaut
  if (totalIncome === 0) {
    return [
      { name: 'Salaire', value: 70 },
      { name: 'Freelance', value: 15 },
      { name: 'Investissements', value: 10 },
      { name: 'Autres', value: 5 }
    ];
  }
  // Tenter d'identifier les types de revenus
  const salary = financialData.income?.filter(i => 
    i.name.toLowerCase().includes('salaire') || 
    i.name.toLowerCase().includes('emploi') ||
    i.name.toLowerCase().includes('travail')
  ).reduce((sum, i) => sum + convertToMonthlyAmount(i.amount, i.frequency), 0) || 0;
  const freelance = financialData.income?.filter(i => 
    i.name.toLowerCase().includes('freelance') || 
    i.name.toLowerCase().includes('indépendant') ||
    i.name.toLowerCase().includes('auto-entrepreneur')
  ).reduce((sum, i) => sum + convertToMonthlyAmount(i.amount, i.frequency), 0) || 0;
  const investments = financialData.income?.filter(i => 
    i.name.toLowerCase().includes('dividende') || 
    i.name.toLowerCase().includes('intérêt') ||
    i.name.toLowerCase().includes('placement') ||
    i.name.toLowerCase().includes('loyer')
  ).reduce((sum, i) => sum + convertToMonthlyAmount(i.amount, i.frequency), 0) || 0;
  const other = totalIncome - salary - freelance - investments;
  return [
    { name: 'Salaire', value: Math.max(0.1, salary) },
    { name: 'Freelance', value: Math.max(0.1, freelance) },
    { name: 'Investissements', value: Math.max(0.1, investments) },
    { name: 'Autres', value: Math.max(0.1, other) }
  ];
}
/**
 * Génère les dépenses par catégorie pour le graphique à barres
 */
function generateExpensesByCategory(financialData) {
  const fixedExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []);
  const variableExpenses = calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  // Catégorisation simple des dépenses
  return [
    { name: 'Logement', value: Math.max(1, fixedExpenses * 0.6) },
    { name: 'Alimentation', value: Math.max(1, variableExpenses * 0.4) },
    { name: 'Transport', value: Math.max(1, fixedExpenses * 0.2 + variableExpenses * 0.1) },
    { name: 'Loisirs', value: Math.max(1, variableExpenses * 0.3) },
    { name: 'Santé', value: Math.max(1, fixedExpenses * 0.1 + variableExpenses * 0.1) },
    { name: 'Divers', value: Math.max(1, fixedExpenses * 0.1 + variableExpenses * 0.1) }
  ];
}
/**
 * Génère une comparaison avec des profils similaires
 */
function generatePeerComparison(financialData) {
  const income = calculateTotalMonthlyIncome(financialData.income || []);
  const fixedExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []);
  const variableExpenses = calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  // Simuler des données de comparaison réalistes
  return [
    { category: 'Logement', vous: Math.max(1, fixedExpenses * 0.6), moyenne: Math.max(1, income * 0.35) },
    { category: 'Alimentation', vous: Math.max(1, variableExpenses * 0.4), moyenne: Math.max(1, income * 0.15) },
    { category: 'Transport', vous: Math.max(1, fixedExpenses * 0.2 + variableExpenses * 0.1), moyenne: Math.max(1, income * 0.12) },
    { category: 'Loisirs', vous: Math.max(1, variableExpenses * 0.3), moyenne: Math.max(1, income * 0.1) },
    { category: 'Épargne', vous: Math.max(1, income - fixedExpenses - variableExpenses), moyenne: Math.max(1, income * 0.2) }
  ];
}
/**
 * Génère une analyse comparative avec des profils similaires
 */
function generatePeerAnalysis(financialData) {
  const income = calculateTotalMonthlyIncome(financialData.income || []);
  const expenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []) + 
                  calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  const savingsRate = income > 0 ? ((income - expenses) / income) * 100 : 0;
  if (savingsRate > 20) {
    return "Votre taux d'épargne est supérieur à la moyenne des personnes ayant des revenus similaires. Continuez sur cette voie!";
  } else if (savingsRate > 10) {
    return "Votre taux d'épargne est proche de la moyenne. Vous pourriez l'améliorer en optimisant certaines dépenses.";
  } else if (savingsRate > 0) {
    return "Votre taux d'épargne est inférieur à la moyenne. Envisagez de revoir votre budget pour augmenter votre capacité d'épargne.";
  } else {
    return "Votre budget est déficitaire, contrairement à la plupart des personnes dans votre tranche de revenus. Des ajustements semblent nécessaires.";
  }
}
/**
 * Calcule la progression vers les objectifs financiers
 */
function calculateGoalProgress(financialData) {
  const goals = financialData.goals || [];
  const monthlyIncome = calculateTotalMonthlyIncome(financialData.income || []);
  const monthlyExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []) + 
                         calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  const monthlySavings = Math.max(0, monthlyIncome - monthlyExpenses);
  if (goals.length === 0) {
    // Créer des objectifs fictifs si l'utilisateur n'en a pas défini
    return [
      {
        name: "Fonds d'urgence",
        current: monthlySavings * 2, // Simuler 2 mois d'épargne déjà réalisée
        target: monthlyExpenses * 6, // Objectif standard: 6 mois de dépenses
        progressPercentage: Math.min(100, (monthlySavings * 2) / (monthlyExpenses * 6) * 100),
        onTrack: monthlySavings > 0,
        timeRemaining: monthlySavings > 0 ? `${Math.ceil((monthlyExpenses * 6 - monthlySavings * 2) / monthlySavings)} mois` : "Indéterminé",
        monthlyRequired: Math.ceil((monthlyExpenses * 6 - monthlySavings * 2) / 12),
        advice: monthlySavings > 0 ? 
          `Continuez à épargner ${monthlySavings.toFixed(2)}€ par mois pour atteindre cet objectif.` : 
          "Essayez de dégager une capacité d'épargne pour constituer ce fonds essentiel."
      },
      {
        name: "Projet à moyen terme",
        current: monthlySavings * 4, // Simuler 4 mois d'épargne déjà réalisée
        target: 5000,
        progressPercentage: Math.min(100, (monthlySavings * 4) / 5000 * 100),
        onTrack: monthlySavings > 0,
        timeRemaining: monthlySavings > 0 ? `${Math.ceil((5000 - monthlySavings * 4) / monthlySavings)} mois` : "Indéterminé",
        monthlyRequired: Math.ceil((5000 - monthlySavings * 4) / 12),
        advice: "Pensez à placer cet argent sur un livret ou un compte rémunéré pour optimiser votre épargne."
      }
    ];
  }
  // Traiter les objectifs réels de l'utilisateur
  return goals.map(goal => {
    // Calculer une valeur actuelle fictive basée sur la date cible
    const targetDate = new Date(goal.date);
    const now = new Date();
    const totalMonths = Math.max(1, Math.round((targetDate - now) / (1000 * 60 * 60 * 24 * 30)));
    const requiredMonthly = goal.amount / totalMonths;
    const current = Math.max(0, Math.min(goal.amount * 0.3, monthlySavings * 3)); // Simuler un début de progression
    return {
      name: goal.name,
      current,
      target: goal.amount,
      progressPercentage: (current / goal.amount) * 100,
      onTrack: monthlySavings >= requiredMonthly,
      timeRemaining: monthlySavings > 0 ? `${Math.ceil((goal.amount - current) / monthlySavings)} mois` : "Indéterminé",
      monthlyRequired: requiredMonthly,
      advice: monthlySavings >= requiredMonthly ? 
        `Vous êtes en bonne voie pour atteindre cet objectif à temps.` : 
        `Pour atteindre cet objectif à temps, essayez d'épargner ${requiredMonthly.toFixed(2)}€ par mois.`
    };
  });
}
/**
 * Génère des concepts financiers personnalisés à apprendre
 */
function generateFinancialConcepts(financialData, emotionalContext) {
  return [
    {
      title: "Règle 50/30/20",
      description: "Allouez 50% de vos revenus aux besoins essentiels, 30% aux désirs, et 20% à l'épargne et au remboursement des dettes.",
      category: "Budgétisation"
    },
    {
      title: "Fonds d'urgence",
      description: "Constituez une épargne de sécurité équivalente à 3-6 mois de dépenses pour faire face aux imprévus.",
      category: "Épargne"
    },
    {
      title: "Effet de levier",
      description: "Comprendre comment l'emprunt peut amplifier les rendements mais aussi les risques dans vos investissements.",
      category: "Investissement"
    },
    {
      title: "Intérêts composés",
      description: "La huitième merveille du monde : comment vos intérêts génèrent eux-mêmes des intérêts au fil du temps.",
      category: "Croissance"
    }
  ];
}
/**
 * Génère des objectifs financiers suggérés
 */
function generateSuggestedGoals(financialData, emotionalContext) {
  const monthlyExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []) + 
                         calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  return [
    {
      name: "Fonds d'urgence complet",
      description: `Épargnez ${(monthlyExpenses * 6).toFixed(0)}€ (6 mois de dépenses) pour faire face aux imprévus.`
    },
    {
      name: "Épargne retraite",
      description: "Commencez à investir régulièrement pour préparer votre retraite et profiter de l'effet des intérêts composés."
    },
    {
      name: "Remboursement des dettes",
      description: "Éliminez vos dettes à taux élevé pour réduire le coût des intérêts et libérer votre capacité d'épargne."
    }
  ];
}
/**
 * Calcule le taux d'épargne recommandé
 */
function calculateRecommendedSavingsRate(financialData) {
  // Taux de base recommandé
  let recommendedRate = 20;
  // Ajuster en fonction de l'âge (simulé)
  const hasRetirementAssets = financialData.assets?.some(a => 
    a.name.toLowerCase().includes('retraite') || 
    a.name.toLowerCase().includes('pension')
  );
  if (!hasRetirementAssets) {
    recommendedRate += 5; // Recommander plus d'épargne si pas de préparation retraite
  }
  // Ajuster en fonction des dettes
  const totalDebt = calculateTotalDebts(financialData.debts || []);
  const monthlyIncome = calculateTotalMonthlyIncome(financialData.income || []);
  if (totalDebt > monthlyIncome * 12) {
    recommendedRate += 5; // Recommander plus d'épargne si endettement important
  }
  return recommendedRate;
}
/**
 * Génère l'insight principal
 */
function generateMainInsight(financialData, emotionalContext, healthIndex, monthlyBalance, savingsRate) {
  // Identifier l'élément le plus significatif de la situation financière
  if (monthlyBalance < 0) {
    return "Votre budget est actuellement déficitaire. Concentrez-vous sur la réduction de vos dépenses variables pour retrouver l'équilibre financier.";
  }
  if (savingsRate < 5) {
    return "Votre taux d'épargne est faible, ce qui limite votre capacité à atteindre vos objectifs financiers. Envisagez d'optimiser certaines dépenses.";
  }
  const fixedExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []);
  const income = calculateTotalMonthlyIncome(financialData.income || []);
  if (fixedExpenses > income * 0.6) {
    return "Vos charges fixes représentent une part importante de vos revenus, ce qui réduit votre flexibilité financière. Examinez les possibilités de les optimiser.";
  }
  if (healthIndex > 70) {
    return "Votre situation financière est globalement saine. Continuez sur cette voie et envisagez de développer vos stratégies d'investissement pour faire fructifier votre patrimoine.";
  }
  return "Votre situation financière présente des points d'amélioration. En suivant nos recommandations personnalisées, vous pourrez progressivement renforcer votre santé financière.";
}
/**
 * Génère un résumé de la situation financière
 */
function generateSummary(financialData, emotionalContext, healthIndex, monthlyBalance, savingsRate) {
  const summary = [];
  // Résumé du budget mensuel
  const income = calculateTotalMonthlyIncome(financialData.income || []);
  const expenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []) + 
                  calculateTotalMonthlyAmount(financialData.variableExpenses || []);
  if (monthlyBalance >= 0) {
    summary.push(`Votre budget mensuel est équilibré avec un solde positif de ${monthlyBalance.toFixed(2)}€.`);
  } else {
    summary.push(`Votre budget mensuel est déficitaire de ${Math.abs(monthlyBalance).toFixed(2)}€, ce qui n'est pas soutenable à long terme.`);
  }
  // Résumé des dépenses fixes
  const fixedExpenses = calculateTotalMonthlyAmount(financialData.fixedExpenses || []);
  const fixedRatio = income > 0 ? (fixedExpenses / income) * 100 : 0;
  if (fixedRatio > 60) {
    summary.push(`Vos charges fixes représentent ${fixedRatio.toFixed(0)}% de vos revenus, ce qui est élevé (idéalement moins de 50%).`);
  } else if (fixedRatio > 0) {
    summary.push(`Vos charges fixes représentent ${fixedRatio.toFixed(0)}% de vos revenus, ce qui est raisonnable.`);
  }
  // Résumé de l'épargne
  if (savingsRate > 20) {
    summary.push(`Votre taux d'épargne de ${savingsRate.toFixed(1)}% est excellent et vous permet de construire rapidement votre patrimoine.`);
  } else if (savingsRate > 10) {
    summary.push(`Votre taux d'épargne de ${savingsRate.toFixed(1)}% est bon, mais pourrait être optimisé pour atteindre vos objectifs plus rapidement.`);
  } else if (savingsRate > 0) {
    summary.push(`Votre taux d'épargne de ${savingsRate.toFixed(1)}% est faible et mériterait d'être augmenté pour sécuriser votre avenir financier.`);
  } else {
    summary.push(`Vous n'épargnez pas actuellement, ce qui vous expose aux imprévus financiers et limite vos possibilités futures.`);
  }
  // Résumé des dettes
  const totalDebt = calculateTotalDebts(financialData.debts || []);
  if (totalDebt > 0) {
    const debtToIncomeRatio = income > 0 ? totalDebt / (income * 12) : 999;
    if (debtToIncomeRatio > 1) {
      summary.push(`Votre niveau d'endettement représente ${debtToIncomeRatio.toFixed(1)} fois vos revenus annuels, ce qui est élevé.`);
    } else {
      summary.push(`Votre niveau d'endettement est maîtrisé à ${(debtToIncomeRatio * 100).toFixed(0)}% de vos revenus annuels.`);
    }
  }
  // Résumé émotionnel
  if (emotionalContext.mood < 5 && emotionalContext.tags.length > 0) {
    summary.push(`Votre contexte émotionnel actuel pourrait influencer vos décisions financières. Prenez le temps de réfléchir avant des choix importants.`);
  }
  return summary;
}
/**
 * Simule un scénario financier avec des ajustements
 */
export function simulateScenario(financialData, adjustments, timeframe) {
  // Appliquer les ajustements aux données financières
  const adjustedData = {
    income: applyAdjustmentToCategory(financialData.income || [], adjustments.income || 0),
    fixedExpenses: applyAdjustmentToCategory(financialData.fixedExpenses || [], adjustments.fixedExpenses || 0),
    variableExpenses: applyAdjustmentToCategory(financialData.variableExpenses || [], adjustments.variableExpenses || 0),
    debts: applyAdjustmentToCategory(financialData.debts || [], adjustments.debts || 0),
    assets: financialData.assets || [],
    goals: financialData.goals || []
  };
  // Calculer les métriques de base
  const monthlyIncome = calculateTotalMonthlyIncome(adjustedData.income);
  const monthlyFixedExpenses = calculateTotalMonthlyAmount(adjustedData.fixedExpenses);
  const monthlyVariableExpenses = calculateTotalMonthlyAmount(adjustedData.variableExpenses);
  const monthlyExpenses = monthlyFixedExpenses + monthlyVariableExpenses;
  const monthlyBalance = monthlyIncome - monthlyExpenses;
  const savingsRate = monthlyIncome > 0 ? (monthlyBalance / monthlyIncome) * 100 : 0;
  // Projection sur la période spécifiée
  const monthlyProjection = [];
  let cumulativeBalance = 0;
  for (let month = 0; month <= timeframe; month++) {
    // Ajouter de légères variations pour plus de réalisme
    const monthIncomeVariation = (Math.random() * 4) - 1; // -1% à +3%
    const monthExpenseVariation = (Math.random() * 5) - 1; // -1% à +4%
    const monthIncome = monthlyIncome * (1 + (monthIncomeVariation / 100));
    const monthExpense = monthlyExpenses * (1 + (monthExpenseVariation / 100));
    const balance = monthIncome - monthExpense;
    cumulativeBalance += balance;
    monthlyProjection.push({
      month,
      income: monthIncome,
      expenses: monthExpense,
      balance: cumulativeBalance
    });
  }
  // Calculer l'impact sur les objectifs
  const originalMonthlyBalance = calculateTotalMonthlyIncome(financialData.income || []) - 
                               (calculateTotalMonthlyAmount(financialData.fixedExpenses || []) + 
                                calculateTotalMonthlyAmount(financialData.variableExpenses || []));
  const goalProgressMonths = originalMonthlyBalance > 0 && monthlyBalance > 0 
    ? Math.round((originalMonthlyBalance / monthlyBalance - 1) * -10) // Négatif = plus rapide
    : 99; // Si l'original était négatif, grand nombre positif
  // Analyse de l'impact
  let analysis = "";
  if (monthlyBalance > originalMonthlyBalance) {
    analysis = `Ce scénario améliore votre solde mensuel de ${(monthlyBalance - originalMonthlyBalance).toFixed(2)}€, soit une augmentation de ${Math.abs(((monthlyBalance / originalMonthlyBalance) - 1) * 100).toFixed(1)}%. Sur ${timeframe} mois, vous pourriez épargner environ ${cumulativeBalance.toFixed(2)}€.`;
  } else if (monthlyBalance >= 0) {
    analysis = `Ce scénario réduit votre solde mensuel de ${(originalMonthlyBalance - monthlyBalance).toFixed(2)}€. Sur ${timeframe} mois, vous pourriez néanmoins épargner environ ${cumulativeBalance.toFixed(2)}€.`;
  } else {
    analysis = `Attention, ce scénario crée un déficit mensuel de ${Math.abs(monthlyBalance).toFixed(2)}€. Sur ${timeframe} mois, cela représenterait une perte d'environ ${Math.abs(cumulativeBalance).toFixed(2)}€.`;
  }
  return {
    monthlyIncome,
    monthlyExpenses,
    monthlyBalance,
    savingsRate,
    finalBalance: cumulativeBalance,
    balanceChange: cumulativeBalance - (originalMonthlyBalance * timeframe),
    goalProgressMonths,
    monthlyProjection,
    monthlySavings: Math.max(0, monthlyBalance),
    analysis
  };
}
/**
 * Applique un ajustement en pourcentage à une catégorie
 */
function applyAdjustmentToCategory(items, percentageChange) {
  if (percentageChange === 0) return items;
  return items.map(item => ({
    ...item,
    amount: item.amount * (1 + percentageChange / 100)
  }));
}
/**
 * Détecte les frais cachés potentiels
 */
export function detectHiddenFees(financialData) {
  const hiddenFees = [];
  // Analyser les dépenses fixes
  if (financialData.fixedExpenses && financialData.fixedExpenses.length > 0) {
    // Détecter les abonnements potentiellement inutilisés
    const subscriptions = financialData.fixedExpenses.filter(e => 
      e.name.toLowerCase().includes('abonnement') ||
      e.name.toLowerCase().includes('netflix') ||
      e.name.toLowerCase().includes('spotify') ||
      e.name.toLowerCase().includes('disney')
    );
    if (subscriptions.length > 2) {
      const totalSubscriptionCost = subscriptions.reduce((sum, s) => sum + convertToMonthlyAmount(s.amount, s.frequency), 0);
      hiddenFees.push({
        name: "Multiples abonnements streaming",
        description: `Vous avez ${subscriptions.length} services de streaming actifs, ce qui représente ${totalSubscriptionCost.toFixed(2)}€ par mois.`,
        monthlyImpact: totalSubscriptionCost * 0.3, // Estimation de l'économie potentielle
        annualImpact: totalSubscriptionCost * 0.3 * 12,
        optimizationDifficulty: "easy",
        recommendation: "Envisagez de rationaliser vos abonnements en gardant uniquement ceux que vous utilisez régulièrement ou optez pour des formules partagées en famille."
      });
    }
    // Détecter les frais bancaires potentiellement élevés
    const bankFees = financialData.fixedExpenses.filter(e => 
      e.name.toLowerCase().includes('banque') ||
      e.name.toLowerCase().includes('bancaire') ||
      e.name.toLowerCase().includes('frais')
    );
    if (bankFees.length > 0) {
      const totalBankFees = bankFees.reduce((sum, f) => sum + convertToMonthlyAmount(f.amount, f.frequency), 0);
      if (totalBankFees > 5) {
        hiddenFees.push({
          name: "Frais bancaires élevés",
          description: `Vous payez ${totalBankFees.toFixed(2)}€ par mois en frais bancaires, ce qui est supérieur à la moyenne.`,
          monthlyImpact: totalBankFees - 2, // Estimation de l'économie potentielle
          annualImpact: (totalBankFees - 2) * 12,
          optimizationDifficulty: "medium",
          recommendation: "Comparez les offres bancaires et envisagez de passer à une banque en ligne qui propose des services sans frais ou à tarifs réduits."
        });
      }
    }
    // Détecter les assurances potentiellement redondantes
    const insurances = financialData.fixedExpenses.filter(e => 
      e.name.toLowerCase().includes('assurance') ||
      e.name.toLowerCase().includes('mutuelle')
    );
    if (insurances.length > 2) {
      const totalInsuranceCost = insurances.reduce((sum, i) => sum + convertToMonthlyAmount(i.amount, i.frequency), 0);
      hiddenFees.push({
        name: "Potentielles assurances redondantes",
        description: `Vous avez ${insurances.length} contrats d'assurance différents pour un total de ${totalInsuranceCost.toFixed(2)}€ par mois.`,
        monthlyImpact: totalInsuranceCost * 0.15, // Estimation de l'économie potentielle
        annualImpact: totalInsuranceCost * 0.15 * 12,
        optimizationDifficulty: "medium",
        recommendation: "Vérifiez les garanties de vos différentes assurances pour éviter les doublons et négociez vos contrats ou changez d'assureur pour obtenir de meilleurs tarifs."
      });
    }
  }
  // Analyser les dépenses variables
  if (financialData.variableExpenses && financialData.variableExpenses.length > 0) {
    // Détecter les achats impulsifs potentiels
    const impulseCategories = ['shopping', 'vêtements', 'mode', 'technologie', 'électronique'];
    const impulseExpenses = financialData.variableExpenses.filter(e => 
      impulseCategories.some(cat => e.name.toLowerCase().includes(cat))
    );
    const totalImpulseExpenses = impulseExpenses.reduce((sum, e) => sum + convertToMonthlyAmount(e.amount, e.frequency), 0);
    const monthlyIncome = calculateTotalMonthlyIncome(financialData.income || []);
    if (totalImpulseExpenses > monthlyIncome * 0.1) {
      hiddenFees.push({
        name: "Dépenses impulsives élevées",
        description: `Vos achats dans les catégories shopping/mode/technologie représentent ${totalImpulseExpenses.toFixed(2)}€ par mois, soit plus de 10% de vos revenus.`,
        monthlyImpact: totalImpulseExpenses * 0.4, // Estimation de l'économie potentielle
        annualImpact: totalImpulseExpenses * 0.4 * 12,
        optimizationDifficulty: "medium",
        recommendation: "Instaurez une règle d'attente de 48h avant tout achat non essentiel et suivez vos dépenses dans ces catégories avec une application dédiée."
      });
    }
    // Détecter les frais de restauration élevés
    const foodExpenses = financialData.variableExpenses.filter(e => 
      e.name.toLowerCase().includes('restaurant') ||
      e.name.toLowerCase().includes('livraison') ||
      e.name.toLowerCase().includes('uber eats') ||
      e.name.toLowerCase().includes('deliveroo')
    );
    const totalFoodExpenses = foodExpenses.reduce((sum, e) => sum + convertToMonthlyAmount(e.amount, e.frequency), 0);
    if (totalFoodExpenses > monthlyIncome * 0.12) {
      hiddenFees.push({
        name: "Dépenses élevées en restauration",
        description: `Vous dépensez ${totalFoodExpenses.toFixed(2)}€ par mois en restaurants et livraisons, ce qui représente une part importante de votre budget.`,
        monthlyImpact: totalFoodExpenses * 0.3, // Estimation de l'économie potentielle
        annualImpact: totalFoodExpenses * 0.3 * 12,
        optimizationDifficulty: "easy",
        recommendation: "Limitez les livraisons de repas à 1-2 fois par semaine et préparez plus de repas à la maison. Vous pourriez économiser jusqu'à 30% sur ce poste de dépenses."
      });
    }
  }
  // Analyser les dettes
  if (financialData.debts && financialData.debts.length > 0) {
    // Détecter les dettes à taux élevé
    const highInterestDebts = financialData.debts.filter(d => 
      d.name.toLowerCase().includes('crédit conso') ||
      d.name.toLowerCase().includes('carte') ||
      d.name.toLowerCase().includes('personnel')
    );
    if (highInterestDebts.length > 0) {
      const totalHighInterestDebt = highInterestDebts.reduce((sum, d) => sum + d.amount, 0);
      hiddenFees.push({
        name: "Dettes à taux d'intérêt potentiellement élevé",
        description: `Vous avez des crédits à la consommation ou cartes de crédit pour un montant total de ${totalHighInterestDebt.toFixed(2)}€.`,
        monthlyImpact: totalHighInterestDebt * 0.005, // Estimation de l'économie mensuelle potentielle
        annualImpact: totalHighInterestDebt * 0.06,
        optimizationDifficulty: "hard",
        recommendation: "Envisagez de regrouper vos crédits ou de les refinancer à un taux plus avantageux, et concentrez vos efforts de remboursement sur les dettes aux taux les plus élevés."
      });
    }
  }
  return hiddenFees;
}
```
```components/ui/FeedbackSurvey.tsx
import React, { useState } from 'react'
import { motion } from 'framer-motion'
import {
  SmileIcon,
  MehIcon,
  FrownIcon,
  XIcon,
  ThumbsUpIcon,
  ThumbsDownIcon,
  SendIcon,
  MessageCircleIcon,
} from 'lucide-react'
import { useTheme } from '../../contexts/ThemeContext'
type FeedbackType = 'positive' | 'neutral' | 'negative' | null
type SurveyStep = 'initial' | 'rating' | 'details' | 'thanks'
interface FeedbackSurveyProps {
  onClose: () => void
  onSubmit?: (feedback: {
    type: FeedbackType
    rating: number
    comment: string
    category?: string
  }) => void
  type?: 'inline' | 'modal' | 'fab'
  title?: string
  question?: string
}
export const FeedbackSurvey = ({
  onClose,
  onSubmit,
  type = 'modal',
  title = 'Votre avis nous intéresse',
  question = 'Comment évaluez-vous votre expérience avec Rivela ?',
}: FeedbackSurveyProps) => {
  const { theme } = useTheme()
  const [step, setStep] = useState<SurveyStep>('initial')
  const [feedbackType, setFeedbackType] = useState<FeedbackType>(null)
  const [rating, setRating] = useState(0)
  const [comment, setComment] = useState('')
  const [category, setCategory] = useState('')
  const handleSubmit = () => {
    if (onSubmit) {
      onSubmit({
        type: feedbackType,
        rating,
        comment,
        category: category || undefined,
      })
    }
    setStep('thanks')
    // Fermer automatiquement après quelques secondes
    setTimeout(() => {
      onClose()
    }, 3000)
  }
  const feedbackCategories = [
    'Interface utilisateur',
    'Précision des analyses',
    "Facilité d'utilisation",
    'Recommandations',
    'Performance',
    'Autre',
  ]
  if (type === 'fab') {
    return (
      <div className="fixed bottom-20 right-4 z-40">
        {step === 'initial' ? (
          <motion.button
            initial={{
              scale: 0.8,
              opacity: 0,
            }}
            animate={{
              scale: 1,
              opacity: 1,
            }}
            whileHover={{
              scale: 1.1,
            }}
            onClick={() => setStep('rating')}
            className={`p-3 rounded-full bg-${theme.accent} shadow-lg flex items-center justify-center`}
          >
            <MessageCircleIcon size={24} />
          </motion.button>
        ) : (
          <motion.div
            initial={{
              opacity: 0,
              y: 20,
            }}
            animate={{
              opacity: 1,
              y: 0,
            }}
            className="bg-white/10 backdrop-blur-md rounded-lg p-4 shadow-lg w-72"
          >
            <div className="flex justify-between items-center mb-3">
              <h3 className="font-medium">{title}</h3>
              <button
                onClick={onClose}
                className="p-1 hover:bg-white/10 rounded-full"
              >
                <XIcon size={18} />
              </button>
            </div>
            {renderContent()}
          </motion.div>
        )}
      </div>
    )
  }
  return (
    <motion.div
      initial={{
        opacity: 0,
        scale: 0.95,
      }}
      animate={{
        opacity: 1,
        scale: 1,
      }}
      className={`bg-white/10 backdrop-blur-md rounded-lg p-6 shadow-lg ${type === 'modal' ? 'w-full max-w-md' : 'w-full'}`}
    >
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-medium">{title}</h3>
        <button
          onClick={onClose}
          className="p-1 hover:bg-white/10 rounded-full"
          aria-label="Fermer"
        >
          <XIcon size={18} />
        </button>
      </div>
      {renderContent()}
    </motion.div>
  )
  function renderContent() {
    switch (step) {
      case 'initial':
        return (
          <>
            <p className="mb-6">{question}</p>
            <div className="flex justify-center space-x-6">
              <motion.button
                whileHover={{
                  scale: 1.1,
                }}
                onClick={() => {
                  setFeedbackType('positive')
                  setRating(5)
                  setStep('details')
                }}
                className="flex flex-col items-center"
              >
                <div className="p-3 rounded-full bg-green-500/20 mb-2">
                  <SmileIcon size={24} className="text-green-400" />
                </div>
                <span className="text-sm">Satisfait</span>
              </motion.button>
              <motion.button
                whileHover={{
                  scale: 1.1,
                }}
                onClick={() => {
                  setFeedbackType('neutral')
                  setRating(3)
                  setStep('details')
                }}
                className="flex flex-col items-center"
              >
                <div className="p-3 rounded-full bg-yellow-500/20 mb-2">
                  <MehIcon size={24} className="text-yellow-400" />
                </div>
                <span className="text-sm">Neutre</span>
              </motion.button>
              <motion.button
                whileHover={{
                  scale: 1.1,
                }}
                onClick={() => {
                  setFeedbackType('negative')
                  setRating(1)
                  setStep('details')
                }}
                className="flex flex-col items-center"
              >
                <div className="p-3 rounded-full bg-red-500/20 mb-2">
                  <FrownIcon size={24} className="text-red-400" />
                </div>
                <span className="text-sm">Insatisfait</span>
              </motion.button>
            </div>
          </>
        )
      case 'rating':
        return (
          <>
            <p className="mb-4">Comment évaluez-vous votre expérience ?</p>
            <div className="flex justify-center space-x-2 mb-6">
              {[1, 2, 3, 4, 5].map((value) => (
                <motion.button
                  key={value}
                  whileHover={{
                    scale: 1.1,
                  }}
                  onClick={() => setRating(value)}
                  className={`w-10 h-10 rounded-full flex items-center justify-center ${rating === value ? `bg-${theme.accent}` : 'bg-white/20'}`}
                >
                  {value}
                </motion.button>
              ))}
            </div>
            <div className="flex justify-between text-sm opacity-70">
              <span>Pas satisfait</span>
              <span>Très satisfait</span>
            </div>
            <div className="flex justify-end mt-6">
              <button
                onClick={() => {
                  setFeedbackType(
                    rating > 3
                      ? 'positive'
                      : rating === 3
                        ? 'neutral'
                        : 'negative',
                  )
                  setStep('details')
                }}
                disabled={rating === 0}
                className={`px-4 py-2 rounded-lg bg-${theme.primary} flex items-center ${rating === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}
              >
                <span className="mr-2">Suivant</span>
                <SendIcon size={16} />
              </button>
            </div>
          </>
        )
      case 'details':
        return (
          <>
            <div className="mb-4">
              <label className="block text-sm font-medium mb-1">
                Catégorie
              </label>
              <select
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                className="w-full p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50"
              >
                <option value="">Sélectionnez une catégorie</option>
                {feedbackCategories.map((cat) => (
                  <option key={cat} value={cat}>
                    {cat}
                  </option>
                ))}
              </select>
            </div>
            <div className="mb-6">
              <label className="block text-sm font-medium mb-1">
                {feedbackType === 'positive'
                  ? "Qu'avez-vous particulièrement apprécié ?"
                  : feedbackType === 'negative'
                    ? 'Comment pouvons-nous nous améliorer ?'
                    : 'Vos commentaires'}
              </label>
              <textarea
                value={comment}
                onChange={(e) => setComment(e.target.value)}
                className="w-full h-24 p-3 rounded-md bg-white/20 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 placeholder-white/50"
                placeholder="Partagez votre expérience..."
              />
            </div>
            <div className="flex justify-end">
              <button
                onClick={handleSubmit}
                className={`px-4 py-2 rounded-lg bg-${theme.primary} flex items-center`}
              >
                <span className="mr-2">Envoyer</span>
                <SendIcon size={16} />
              </button>
            </div>
          </>
        )
      case 'thanks':
        return (
          <div className="text-center py-6">
            <motion.div
              initial={{
                scale: 0.5,
                opacity: 0,
              }}
              animate={{
                scale: 1,
                opacity: 1,
              }}
              className={`mx-auto w-16 h-16 rounded-full bg-${theme.accent}/20 flex items-center justify-center mb-4`}
            >
              <ThumbsUpIcon size={32} className={`text-${theme.accent}`} />
            </motion.div>
            <h3 className="text-lg font-medium mb-2">
              Merci pour votre feedback !
            </h3>
            <p className="opacity-70">
              Votre avis nous aide à améliorer Rivela.
            </p>
          </div>
        )
    }
  }
}

```